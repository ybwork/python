Оглавление

	Что это

	Установка

	Команды

	Docker Engine

	Архитектура Docker

	Образы

	Контейнеры

	Реестр

	Что происходит при запуске контейнера?

	Пространства имен

	Контрольные группы

	Создание Dockerfile

	Создание образа из Dockerfile

	Загрузка нового образа

	Запуск web-приложения

	Docker Hub

	Задача

Что это

	Docker - это инструмент, который позволяет развернуть приложение со всеми его зависимости в отдельной среде, называемой контейнер

	Docker используется для деплоя и тестирования

	Контейнер - это изолированная от основной системы комьютера среда, которая работает за счёт железа компьютера

	Docker даёт возможность запускать несколько контейнеров на одном хосте

Установка

	sudo apt-get update

	sudo apt-get install apt-transport-https ca-certificates curl software-properties-common

	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add

	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"

	sudo apt-get update

	apt-cache policy docker-ce

	sudo apt-get install docker-ce

	udo systemctl status docker (должна показать active running)

	sudo usermod -aG docker ${USER}

	su - ${USER}

	id -nG

Команды

	docker version

	docker run

	docker run hello-world

	docker ps - показывает запущенные контейнеры

	docker ps -a - показывает все контейнеры в системе

	docker ps -l - показывает информацию о последнем запущенном контейнере

	docker images - отображает список образов

	docker build -t docker-imagename . - собирает образ из Dockerfile

	docker rmi -f docker-whale - удаляет образ с машины

	docker run -t -i ubuntu /bin/bash - позволяет запустить контейнер с дополнительными параметрами:

		-t - активирует псевдо-терминал для нового контейнера

		-i - позволяет сделать интерактивное соединение захватывая поток ввода STDIN

		ubuntu - название запускаемого образа

		/bin/bash - запускает Bash shell внутри контейнера

	root@af8bae53bdd3:/# exit - позволяет выйти из терминала контейнера

	docker logs - показывает стандартный вывод контейнера

	docker stop container_name - останавливает контейнер

	docker run -d -P training/webapp python app.py - запускает контейнер в фоновом режиме и связывает все необходимые порты с портами на локальной машине

	docker run -d -p 80:5000 training/webapp python app.py - параметр 80:5000 позволяет чётко указать, какой порт с каким нужно связать

Docker Engine

	Это клиент серверное приложение

	Состоит из трёх компонентов:

		Сервер работающий в фоновом режиме (демон)

		REST API, который используют программы для взаимодействия с сервером

		Интерфейс командной строки (CLI) клиент

Архитектура Docker

	Docker использует клиент-серверную архитектуру

	Docker клиент обращает к демону, которые создаёт, запускает и доставляет контейнеры

	Docker клиент и демон могут быть запущены в одной системе или клиент может подключиться к удаленному демону

	Docker клиент и демон общаются через сокеты или REST API

	Docker клиент это файл и он является основным пользовательским интерфейсом

Образы

	Образ - это шаблон с набором инструкций для создания контейнера

	Только для чтения

	Из образов докер инициализирует контейнеры

	Образ Docker описывается в специальном текстовом файле с именем Dockerfile

	Каждый образ состоит из ряда слоев

	К примеру, образ может состоять из операционной системы Ubuntu, веб-сервера Apache и вашего веб-приложения

	Благодаря системе слоев Docker так легковесен

	Когда вы изменяете образ, например при обновлении приложений на новою версию, новый слой заменяет только те слои которые затрагивают изменения

	Докер читает Dockerfile, когда вы запрашиваете сборку образа, выполняет инструкции и возвращает образ

Контейнеры

	Контейнер - это компонент внутри которого содержится всё необходимое для приложения

	Каждый контейнер является изолированной и безопасной платформой

	Каждый контейнер может получить доступ к ресурсам запущенным на других хостах или контейнерах

	Контейнер использует Linux ядро хост-машины

	Каждый контейнер построен из образа

	Когда Docker запускает контейнер из образа, он добавляет слой для чтения-записи поверх образа

	Форматом по умолчанию для контейнеров является libcontainer

	Контейнер может выполнить простую команду и затем завершиться. Это как раз и происходит при запуске контейнера hello-world

Реестр

	Реестр – это библиотека образов

	Может быть публичным или приватным

	Публичный реестр храниться на внешнем сервере, например Docker Hub

	Приватный реестр храниться на моём сервере

	Может располагаться на одном сервере с демоном и клиентом или на отдельном сервере

Что происходит при запуске контейнера?

	Загружается образ

	Создается новый контейнер

	Размечается файловая система

	Создаётся сеть

	Выделяется IP адрес

Пространства имен

	Докер использует технологию пространств имен

	Пространство имён обеспечивает изолированность контейнеров

Контрольные группы

	Контрольные группы позволяют докеру разделять ресурсы компьютера между контейнерами

Создание Dockerfile

	mkdir mydockerbuild

	Этот каталог служит в качестве контекста для сборки

	cd mydockerbuild

	touch Dockerfile

	ls Dockerfile (должен показать созданный Dockerfile)

	Внутри Dockerfile:

		FROM docker/whalesay:latest - слово FROM говорит Docker какой образ будет базовым

		RUN apt-get -y update && apt-get install -y fortunes - fortunes имеет команду которая выводит мудрые фразы для нашего кита, а эта строка устанавливает программу в образ

		CMD /usr/games/fortune -a | cowsay - позволяет указать, что запускать при старте контейнера

Создание образа из Dockerfile

	cat Dockerfile - показывает содержимое файла

	docker build -t docker-whale . - собирает образ из Dockerfile

Запуск нового образа

	Для того чтобы докер загрузил новую версию образа, который уже установлен, нужно удалить старую версию образа

	docker run docker/whalesay - делает pull докер образа из репозитория, docker это имя пользователя

Запуск web-приложения

	docker run -d -P training/webapp python app.py - описание параметров:

		-d - флаг, который позволяет запустить контейнер в фоновом режиме 

		-P - флаг, который говорит докер связывать любые необходимые сетевые порты внутри нашего контейнера с портами родительской машины

		training/webapp - название образа, который позволяет создать простое приложение на python-flask

		python app.py - команда для запуска контейнера

Docker Hub

	Docker Hub - это публичный реестр образов

Задача

	Создать образ

	Создать контейнеры

		postgres

		nginx

		php

	Связать контейнеры между собой


