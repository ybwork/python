Оглавление

	Что это

	Установка

	Команды

	Docker Engine

	Архитектура Docker

	Образы

	Создание Dockerfile

	Создание образа из Dockerfile

	Создание собственных образов

	Загрузка нового образа

	Контейнеры

	Что происходит при запуске контейнера?

	Сетевые контейнеры

	Порты

	Реестр

	Пространства имен

	Контрольные группы

	Запуск web-приложения

	Docker Compose

	Volumes

	Docker Hub

	Задача

Что это

	Docker - это инструмент, который позволяет развернуть приложение со всеми его зависимости в отдельной среде, называемой контейнер

	Docker используется для деплоя и тестирования

	Контейнер - это изолированная от основной системы комьютера среда, которая работает за счёт железа компьютера

	Docker даёт возможность запускать несколько контейнеров на одном хосте

	Плюсы докера в его слоистости. Мы можем создать образ с системой и на его основе контейнер, а сверху наслаивать другие сервисы (например postgres и nginx). В итоге мы получаем не три контейнера, где каждый имеет свою ос, а три контейнера на основе одной ос. Тем самым экономится место.

Установка

	sudo apt-get update

	sudo apt-get install apt-transport-https ca-certificates curl software-properties-common

	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add

	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"

	sudo apt-get update

	apt-cache policy docker-ce

	sudo apt-get install docker-ce

	udo systemctl status docker (должна показать active running)

	sudo usermod -aG docker ${USER}

	su - ${USER}

	id -nG

Команды

	docker version

	docker run

	docker run hello-world

	docker ps - показывает запущенные контейнеры

	docker ps -a - показывает все контейнеры в системе

	docker ps -l - показывает информацию о последнем запущенном контейнере

	docker images - отображает список образов

	docker build -t docker-imagename . - собирает образ из Dockerfile, флаг -t указывает принадлежность образа пользователю, который указывается после флага

	docker rmi -f docker-whale - удаляет образ с машины

	docker run -t -i ubuntu /bin/bash - позволяет запустить контейнер с дополнительными параметрами:

		-t - активирует псевдо-терминал для нового контейнера

		-i - позволяет сделать интерактивное соединение захватывая поток ввода STDIN

		ubuntu - название запускаемого образа

		/bin/bash - запускает Bash shell внутри контейнера

	root@af8bae53bdd3:/# exit - позволяет выйти из терминала контейнера

	docker logs - показывает стандартный вывод контейнера

	docker stop container_name - останавливает контейнер

	docker run -d -P training/webapp python app.py - запускает контейнер в фоновом режиме и связывает все необходимые порты с портами на локальной машине

	docker run -d -p 80:5000 training/webapp python app.py - параметр 80:5000 позволяет чётко указать, какой порт с каким нужно связать

	docker-machine ip my-docker-vm - позволяет посмотреть P-адрес виртуального хоста контейнерах

	docker port container_name 5000 - позволяет увидеть номер внешнего порта привязанного к внутреннему 5000 порту в контейнере

	docker logs -f container_name - позволяет посмотреть логи

	docker top container_name - позволяет посмотреть процессы запущенные в контейнере

	docker inspect container_name - позволяет посмотреть конфигурацию контейнера

	docker start container_name - перезапускает контейнер

	docker rm container_name - удаляет контейнер, но только остановленный

	docker pull centos - позволяет загрузить образ

	docker search sinatra - поиск образов

	docker commit -m "Added json gem" -a "Kate Smith" 0b2616b0e5a8 ouruser/sinatra:v2 - делает коммит, который позволяет из на основе старого образа создать новый, это делает кускок: 0b2616b0e5a8 ouruser/sinatra:v2

	docker run -d -P --name web training/webapp python app.py - позволяет задать имя для контейнера, это делает часть --name web

	docker network ls - показывает все сети

	docker network inspect bridge - выводит всю инфу о сети

	docker network disconnect bridge container_name - отключает указанный контейнер от сети

	docker network connect my-bridge-network web - подключает контейнер web к сети my-bridge-network

	docker network create -d bridge my-bridge-network - создание собственной сети типа bridge

	docker run -d --network=my-bridge-network --name db training/postgres - добавление в сеть нового контейнера, это делает часть --network=my-bridge-network

	docker run -d -P --name web -v /webapp training/webapp python app.py - запускает контейнер и создаёт том данных для него, это делает часть -v /webapp	

	docker stop $(docker ps -a -q) - останавливает все контейнеры

	docker rm $(docker ps -a -q) - удаляет все остановленные контейнеры

	docker rmi $(docker images -q)- удаляет все образы

	docker volume create my-vol

	docker volume ls

	docker volume inspect my-vol

	docker volume rm my-vol

	docker container run -it -p 5000:5000 -v /home/user/folder-i-want-to-read/:/path_in_container bjoffe/openface_flask_v2 /bin/bash

Docker Engine

	Это клиент серверное приложение

	Состоит из трёх компонентов:

		Сервер работающий в фоновом режиме (демон)

		REST API, который используют программы для взаимодействия с сервером

		Интерфейс командной строки (CLI) клиент

Архитектура Docker

	Docker использует клиент-серверную архитектуру

	Docker клиент обращает к демону, которые создаёт, запускает и доставляет контейнеры

	Docker клиент и демон могут быть запущены в одной системе или клиент может подключиться к удаленному демону

	Docker клиент и демон общаются через сокеты или REST API

	Docker клиент это файл и он является основным пользовательским интерфейсом

Образы

	Образ - это шаблон с набором инструкций для создания контейнера

	Только для чтения

	Из образов докер инициализирует контейнеры

	Образ Docker описывается в специальном текстовом файле с именем Dockerfile

	Каждый образ состоит из ряда слоев

	Каждый образ начинается с базового образа, такого как Ubuntu или Fedora.

	Вы можете также использовать собственные образы как базовые для создания новых, к примеру если вы имеете базовый образ Apache вы можете использовать его как базовый для вашего веб-приложения.

	Базовый образ задается командой FROM в dockerfile.

	Каждая инструкция создает новый слой в образе.

	К примеру, образ может состоять из операционной системы Ubuntu, веб-сервера Apache и вашего веб-приложения

	Благодаря системе слоев Docker так легковесен

	Когда вы изменяете образ, например при обновлении приложений на новою версию, новый слой заменяет только те слои которые затрагивают изменения

	Докер читает Dockerfile, когда вы запрашиваете сборку образа, выполняет инструкции и возвращает образ

Создание Dockerfile

	mkdir mydockerbuild

	Этот каталог служит в качестве контекста для сборки

	cd mydockerbuild

	touch Dockerfile

	ls Dockerfile (должен показать созданный Dockerfile)

	Внутри Dockerfile:

		FROM docker/whalesay:latest - слово FROM говорит Docker какой образ будет базовым

		RUN apt-get -y update && apt-get install -y fortunes - fortunes имеет команду которая выводит мудрые фразы для нашего кита, а эта строка устанавливает программу в образ

		CMD /usr/games/fortune -a | cowsay - позволяет указать, что запускать при старте контейнера

Создание образа из Dockerfile

	cat Dockerfile - показывает содержимое файла

	docker build -t docker-whale . - собирает образ из Dockerfile

Создание собственных образов
	
	Можно взять готовый образ, добавить нужные вещи и сделать коммит контейнера. Этот коммит создаст новый образ

		docker run -t -i training/sinatra /bin/bash

		скопировать ID созданного контейнера

		docker commit -m "Added json gem" -a "Kate Smith" 0b2616b0e5a8 ouruser/sinatra:v2 - делает коммит, который позволяет из на основе старого образа создать новый, это делает кускок: 0b2616b0e5a8 ouruser/sinatra:v2

	Можно создать Dockerfile и добавить в него инструкции для создания нового образа

		mkdir sinatra

		cd sinatra

		touch Dockerfile

		Пример наполнения Dockerfile:

			FROM ubuntu:14.04
			RUN apt-get update && apt-get install -y ruby ruby-dev
			RUN gem install sinatra

		docker build -t ouruser/sinatra:v2 .

Загрузка нового образа

	docker pull centos - позволяет загрузить образ

	Преимущество такой загрузки в том, что когда мы запустим образ, он сразу начнёт работать. Если же мы запускаем образ, не загрузив его, то сначала он загружается, а потом запускается	 

Запуск нового образа

	Для того чтобы докер загрузил новую версию образа, который уже установлен, нужно удалить старую версию образа

	docker run docker/whalesay - делает pull докер образа из репозитория, docker это имя пользователя

Контейнеры

	Контейнер - это компонент внутри которого содержится всё необходимое для приложения

	Каждый контейнер является изолированной и безопасной платформой

	Каждый контейнер может получить доступ к ресурсам запущенным на других хостах или контейнерах

	Контейнер использует Linux ядро хост-машины

	Каждый контейнер построен из образа

	Когда Docker запускает контейнер из образа, он добавляет слой для чтения-записи поверх образа

	Форматом по умолчанию для контейнеров является libcontainer

	Контейнер может выполнить простую команду и затем завершиться. Это как раз и происходит при запуске контейнера hello-world

Что происходит при запуске контейнера?

	Загружается образ

	Создается новый контейнер

	Размечается файловая система

	Создаётся сеть

	Выделяется IP адрес

Сетевые контейнеры

	Позволяют обращаться из одного контейнера к другому.

	docker run -d -P --name web training/webapp python app.py - запустили контейнер и присвоили ему имя web

	docker ps -l - проверили правильность присвоения имени, можно было использовать команду docker inspect web

	Имена контейнеров должны быть уникальными. Это значит что вы можете назвать только один контейнер именем web. Если вы хотите использовать то же самое имя для другого контейнера вы должны удалить предыдущий контейнер перед тем как использовать имя повторно

	Для обращения контейнера к контейнеру в рамках сети, они должны быть внутри одной сети.

	Docker обеспечивает два сетевых драйвера, мост (bridge) и наложение (overlay).

	Сеть с названием bridge является основной. Если вы не скажете ему иначе, Docker всегда запускает все контейнеры в этой сети.

	docker network inspect bridge - выводит всю инфу о сети

	docker network disconnect bridge container_name - отключает указанный контейнер от сети

	docker network create -d bridge my-bridge-network - создание собственной сети типа bridge

	docker run -d --network=my-bridge-network --name db training/postgres - добавление в сеть нового контейнера, это делает часть --network=my-bridge-network

	docker network connect my-bridge-network web - подключает контейнер web к сети my-bridge-network

	docker exec -it db bash - заходим в терминал контейнера

		ping web - проверяем доступность другого контейнера в сети

Управление данными в контейнерах

	Два основных способа управлять данными в Docker Engine:

		Тома данных

		Контейнеры томов данных

	Том данных - это специально отведенная директория для одного или более контейнера, которая не использует Union File System

	Тома инициализируются при создании контейнера. Если базовый образ контейнера содержит данные в точке монтирования, эти данные копируются в новый том при инициализации

	Тома данных могут быть использованы между контейнерами

	Изменения в томах данных производятся напрямую

	Изменения в томах данных не включаются когда вы обновляете образ

	Тома данных сохраняются даже при удалении контейнера

	Тома данных разработаны для сохранения данных, не зависимо от жизненного цикла контейнера

	docker run -d -P --name web -v /webapp training/webapp python app.py - запускает контейнер и создаёт том данных для него, это делает часть -v /webapp

	Запуская команду docker inspect web, созданные тома можно найти в Mounts

Порты

	Каждый сервис внутри контейнера доступен по определённому порту.

	Каждый контейнер изолирован от внешнего мира и до сервиса внутри контейнера не возможно достучаться по тому порту, который он слушает.

	Чтобы сервис внутри контейнера был доступен нужно пробросить порт.

	Например postgres доступен внутри контейнера на порту 5021 и доступен из вне на порту 2022

	docker run -d -P training/webapp python app.py - запускает контейнер в фоновом режиме и связывает все необходимые порты с портами на локальной машине

	docker run -d -p 80:5000 training/webapp python app.py - параметр 80:5000 позволяет чётко указать, какой порт с каким нужно связать

	docker-machine ip my-docker-vm - позволяет посмотреть P-адрес виртуального хоста контейнерах

	docker port container_name 5000 - позволяет увидеть номер внешнего порта привязанного к внутреннему 5000 порту в контейнере, nostalgic_morse это имя контейнера

Реестр

	Реестр – это библиотека образов

	Может быть публичным или приватным

	Публичный реестр храниться на внешнем сервере, например Docker Hub

	Приватный реестр храниться на моём сервере

	Может располагаться на одном сервере с демоном и клиентом или на отдельном сервере

Пространства имен

	Докер использует технологию пространств имен

	Пространство имён обеспечивает изолированность контейнеров

Контрольные группы

	Контрольные группы позволяют докеру разделять ресурсы компьютера между контейнерами

Запуск web-приложения

	docker run -d -P training/webapp python app.py - описание параметров:

		-d - флаг, который позволяет запустить контейнер в фоновом режиме 

		-P - флаг, который говорит докер связывать любые необходимые сетевые порты внутри нашего контейнера с портами родительской машины

		training/webapp - название образа, который позволяет создать простое приложение на python-flask

		python app.py - команда для запуска контейнера

Docker Compose

	...

Volumes

	...

Docker Hub

	Docker Hub - это публичный реестр образов

Задача

	Поднять проект на django с разными версиями postgres и в разных контейнерах

	Postgres

		docker run --name db -v postgres-vol:/main -p 5462:5432 -e POSTGRES_PASSWORD=asdf1234 -d postgres

		docker run --name db -p 5462:5432 -e POSTGRES_PASSWORD=asdf1234 -d postgres

		docker run -it --rm --link db:postgres postgres psql -h postgres -U postgres - позволяет зайти в psql

		docker run --name db -v postgres-vol:/main -it --rm --link db:postgres -d postgres psql -h postgres -U postgres - позволяет зайти в psql

		CREATE DATABASE docker OWNER postgres;

		\c db_name

		CREATE TABLE users (id integer, name varchar(255), PRIMARY KEY(id));

		\dt

		INSERT INTO users VALUES (1, 'Ilya');

	Nginx

		docker run --name server -v nginx:/nginx -p 8080:80 -d nginx


