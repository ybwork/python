Оглавление

	Что должна делать система

	Сбор требований

	Как подходить к проектированию приложения

	Пример

	Нюансы

Что должна делать система

	Система должна помогать заказчику достигнуть его цели.

Сбор требований

	Требование - это то, как должен работать продукт.

	Например собачья дверь. Она должна уметь впускать и выпускать собаку, управляться с помощью пульта, не должна впускать других животных, автоматически закрываться через какое то время после открытия.

	Для того чтобы собрать требования нужно полностью выслушать заказчика, задать нужные вопросы и преобразовать все сказанное в требования.

	Например заказчик говорит: 

		"Фидо около 12 дюймов ростом, и мы не хотим, чтобы ему приходилось пригибаться, — это вредно для позвоночника. И мы хотим, чтобы дверь автоматически закрывалась через несколько секунд."

	Отсюда можно сформулировать следующие требования:

		- Дверь должна быть не меньше 12 дюймов

		- Дверь должна быть закрыта автоматически через несколько секунд после открытия

		- Пульт будет иметь одну кнопку

		- Когда нажимаешь на кнопку дверь открывается, если она закрыта и закрывается, если она окрыта

	Хороший набор требований выходит за рамки того, что хочет заказчик и описывает все непредвиденные ситуации о которых он даже не подумал.

	После того как составлены все требования нужно подумать о том, как будет использоваться продукт и на основе этого дополнить их, если что то упущенно.

	Для этого нужно описать варианты использования продукта или use case.

	Варианты использования или use case - это набор последовательных шагов выполняемых системой с какой-либо целью.

	Варианты использования отвечают на вопрос: "Что должна делать система для достижения нужно цели?"

	Каждый вариант использования должен иметь начало и конец.

	Например:

		- Фидо лает, чтобы его выпустили

		- Тодд и Джина слышат лай

		- Джина нажимает кнопку на пульте

		- Фидо выходит

		- Дверь автоматически закрывается

		- Фидо делает своё дело

		- Фидо просится обратно домой

		- Джина это слышит

		- Джина нажимает кнопку

		- Фидо заходит обратно

		- Дверь автоматически закрывается

	Один вариант использования предназначен одно цели.

	Вариант использования может считаться законченным, если достигнута цель заказчика.

	Если вариант использования не помогает заказчику достигнуть цели, то от него лучше отказаться.

	После того описаны все варианты использования нужно предусмотреть все возможные неудачи.

	Например:

		- Что будет если хозяин не услышит лай собаки?

		- Что будет если никого нет дома?

		- Что будет если собака не сразу зайдёт или выйдет?

		и т.д.

Как подходить к проектированию приложения

	Описываем процесс

	Под процессом понимается какое то конкретное действие. Например "Добавление рассчётных счетов"

	Описываем процесс (кто делает, какие поля имеет визуальный интерфейс, что происходит в процессе)

	Придумываем алгоритм реализации процесса

Пример

	Задача:

		Формирует сделки между продавцом и покупателем

		Клиент: Ф.И.О., логин, пароль, расчётные счета

		Клиент может продавать услугу (продавец) или приобретать (покупатель)

		Расчётный счёт привязан к конкретному банку

		Сделка:

			Срок проведения

			Возможность частичной оплаты

			Площадка берёт фиксированную сумму за указание услуг

			Сделка не оплаченная вовремя, отменяется (все средства возвращаются)

			Факт результата оплаты возвращает нам некоторое стороннее приложение (банковские клиенты)

		Банк клиент:

			Снять какую то сумму

			Зачислить какую то сумму

			Отдать баланс о состоянии рассчётного счёта (тип банка и номер счёта)

			Отдельное приложение на python 3.6+ и flask. 

			Для процедуры снять и зачислить используем вероятность успеха.

	Проектирование:
	
		Торговая площадка

			Процессы:

				Создание пользователей системы

					Администратор

						Используем встроенного суперпользователя Django

					Клиенты (продавцы, покупатели)

						Создаёт администратор

						Интерфейс имеет поля:

							Ф.И.О

							Логин

							Пароль

				Добавление рассчётных счетов

					Добавляют клиенты в личном кабинете

					Под личным кабинетом подразумеваю админку с ограниченными правами

					Интерфейс выводит информацию о клиенте

					Интерфейс имеет поля:

						Рассчётный счёт (#343434)

				Статусы сделки

					Добавляет администратор

					Интерфейс имеет поля:

						Статус

				Создание "предложения"

					Создаёт клиент в личном кабинете

					Интерфейс имеет поля:

						Название

						Описание

						Цена

						Время на оплату сделки

						Процент, который берёт администратор (по дефолту 5%), клиент не видит

				Сделка

					Создаётся автоматически, когда клиент нажимает "купить"

					После нажатия на "купить" клиента перебрасывает на страницу оплаты заказа

				Оплата сделки

					Интерфейс имеет поля:

						Сумма

						Рассчётный счёт

					Если банки продавца-покупателя разные, то выводим итоговую сумму с учётом коммиссии

					1. Получаем процент при переводе, делая запрос к банк клиенту и считаем итоговую сумму

					2. Фоном чекаем проценты при переводе между разными банками и пишем к себе в базу, а потом берём процент из неё

					Условия:

						Клиент может оплатить сделку целиком или частично

						Если оплатил целиком, то сделка переходит в разряд "завершённые"

						Если оплатил частично, то сделка переходит в раздел "в процессе"

					При оплате данные отправляются в банк клиент и происходит процесс снятия-зачисления (в фоновом режиме)		

Нюансы

	Перед написание тестов лучше написать прототип, потому что в процессе написания чётко выясняются все требования к функционалу. Затем выкинуть прототип, на основе его функционала правильно спроектировать приложение и написать его заново.

	Под правильным проектированием подразумевается продумывание всех возможных вариантов и гибкая, легко расширяемая система.