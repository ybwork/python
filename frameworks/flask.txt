Оглавление

	Что это

	Установка

	Команды

	Быстрый старт

	Маршрутизация

	Статические файлы

	Шаблоны

	Доступ к данным запроса

	Логгирование

	SQLAlchemy

Что это

	Это микрофреймворк написанный на python.

	Flask не включает уровень абстракции баз данных, валидации форм и других встроенных в большие фреймворки вещей.

	Но Flask имеет простое и расширяемое ядро для подключения всего нужно для полноценной разработки веб-приложений.

Установка

	sudo pip install Flask (pip install Flask)

Команды

	python app.py - запускает проект если есть проверка if __name__ == '__main__': app.run()

	flask run - запускает проект

Быстрый старт

	from flask import Flask

	app = Flask(__name__) - экземпляр этого класса и будет WSGI-приложением, если используется единственный модуль, нужно использовать __name__, потому что в зависимости от того, запущен ли код как приложение, или был импортирован как модуль, это имя будет разным ('__main__' или актуальное имя импортированного модуля)

	@app.route('/')
	def home():
		return 'home'

	if __name__ == '__main__':
		app.run(debug=True)

	python app.py

	http://127.0.0.1:5000/

Маршрутизация

	Для маршрутизации используется модуль Werkzeug. Он встроен.

	@app.route('/')

	@app.route('/post/<int:id>') - возможно задать string, int, float, path (не допускает слеши), uuid
	def show(id):
	    return 'post'

	@app.route('/')
	def index(): pass
		return 'index'
	url_for('index', , next='customers') - позволяет создать урл на основе функции def index() в шаблоне, второй аргумент передаёт параметры в запрос и получается /login?next=customers

	@app.route('/login', methods=['GET', 'POST'])

Статические файлы

	По соглашению, шаблоны и статические файлы хранятся в директории static.

	Создать папку static внутри проекта.

	url_for('static', filename='style.css')

	<a href="{{ url_for('login') }}">log in</a>

Шаблоны

	В качестве шаблонизатора используется Jinja2. Он встроен.

	from flask import render_template

	def hello(name=None):
    	return render_template('hello.html', name=name)

    Flask будет искать шаблоны в папке templates, которую нужно создать в корне проекта.

    Jinja2 поддерживает наследование.

    Создаём файл layout.hmtl

    	{% block content %} {% endblock %}

    Создаём файл index.html

    	{% extends 'layout.html' %}

    	{% block content %} {% endblock %}

Доступ к данным запроса

	Эта информация предоставляется глобальным объектом request.

	from flask import request

	request.method

	request.form['name'] - для доступа к данным формы

	Если ключ, указанный в атрибуте form, не существует, то будет возбуждена специальная ошибка KeyError.

	Если не перехватить KeyError, то будет показана страница с ошибкой HTTP 400 Bad Request.

	request.args.get('key', '') - для доступа к параметрам в URL

	Мы рекомендуем доступ к параметрам внутри URL через get или через перехват KeyError, так как пользователь может изменить URL, а предъявление ему страницы с ошибкой 400 bad request не является дружественным.

Логгирование

	По умолчанию используется стандартное логгирование питона.

	Для кооректной работы нужно заменить from flask import logging на import logging.

SQLAlchemy

	pip install Flask-SQLAlchemy

	pip install psycopg2

	pip install Flask-Migrate

	SQLALCHEMY_DATABASE_URI = \
        'postgresql+psycopg2://postgres:asdf@127.0.0.1:5432/bank_client'

    flask_app
    db = SQLAlchemy(flask_app)
    import models
	migrate = Migrate(flask_app, db)

	models.py

		class User(db.Model):
		    id = db.Column(db.Integer, primary_key=True)
		    name = db.Column(db.String(128))


	flask db init - создаёт место для хранения миграций

	flask db migrate - создаёт таблицу в базе данных для хранения версий миграций

	flask db migrate -m "Migration name" - создаёт миграцию

	flask db upgrade - выполняет миграцию

	flask db downgrade - откатывает миграцию



