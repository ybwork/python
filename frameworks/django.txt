Оглавление

	Тестирование

	Хранение файлов

	Фильтрация

	Юнит тесты

	Юнит тесты (нюансы)

	Юнит тесты (команды)

	Множественное создание

	Админ (доступ к списку сущности)

	Запросы

	Нюансы

Тестирование

	Есть класс Client для тестов клиентской части приложения.

	Есть класс RequestFactory для использования в тестах объекта request.

	Из объекта Client можно получить текущего пользователя через result.wsgi_request.user

Хранение файл

	Есть класс FileSystemStorage, который реализует всю работу по локальному хранению файлов.

Фильтрация

	При множественной фильтрации каждый queryset уникален и никак не связан с предыдущим.

		q_1 = Question.objects.filter(year=2006) 
		q_2 = q_1.filter(is_active=True)
		q_3 = q_2.filter(tag='music')

Юнит тесты


Юнит тесты нюансы

	Помнить, что при выполнении тестов создается ПУСТАЯ база данных.

	Если класс в котором написаны тесты наследуется от from django.test import TestCase, то при выполнении будет создана новая, пустая и временная база данных.

	Если класс в котором написаны тесты наследуется напрямую от unittest.TestCase (класс чистого python для тестирования), то при выполнении будет использована боевая база данных и это может иметь последствия.

Юнит тесты команды

	self.assertEqual()

	self.assertQuerysetEqual()

Множественное создание

	Invoice.objects.bulk_create(
		Invoice(num='bbb'),
		Invoice(num='aaa')
	)

Админ (доступ к списку сущности)

	response.context['cl'].queryset

Запросы

	Permission.objects.filter(codename__in=['add_invoice', 'view_invoice'])

	Invoice.objects.order_by('?') - сортировка по asc

Нюансы

	Чтобы отправлялись сообщения об ошибках DEBUG должен быть в False и в ADMINS = [('Ilya', 'kaduk@gmail.com')] указана почта куда оптравлять ошибки.