Оглавление

	Что это

	Из чего состоит паттерн

	Зачем знать паттерны

	Классификация паттернов

	Порождающие

	Фабричный метод

	Абстрактная фабрика

	Одиночка

Что это

	Паттерн проектирования - это часто встречающееся решение определённой проблемы при проектировании архитектуры программ.

	Паттерн представляет собой не какой-то конкретный код, а общую концепцию решения той или иной проблемы, которую нужно будет ещё подстроить под нужды вашей программы.

Из чего состоит паттерн

	Паттерн состоит из:

		проблемы, которую он решает

		способ решения проблемы

		структуры классов, составляющих решение

Зачем знать паттерны

	Проверенные решения.

	Делается меньше просчётов при проектировании, так как все скрытые проблемы в них уже давно найдены.

	Общий программистский словарь.

Классификация паттернов

	Порождающие

	Структурные

	Поведенческие

Порождающие

	Отвечают за создание объектов.

	Список: фабричный метод, абстрактная фабрика, строитель, прототип, одиночка.

Фабричный метод

	Порождающий паттерн.

	Определяет общий интерфейс для создания объектов, позволяя подклассам изменять тип создаваемых объектов.

	Проблема

		Представьте, что вы создаёте программу управления грузовыми перевозками. Сперва вы рассчитываете перевозить товары только на автомобилях. Поэтому весь ваш код работает с объектами класса Грузовик. В какой-то момент ваша программа становится настолько известной, что морские перевозчики выстраиваются в очередь и просят добавить поддержку морской логистики в программу. Чтобы добавить в программу классы морских Судов, понадобится перелопатить всю программу, потому что большая часть существующего клиентского кода жёстко привязана к классам Грузовиков. Более того, если вы потом решите добавить в программу ещё один вид транспорта, то всю эту работу придётся повторить. В итоге вы получите ужасающий код, наполненный условными операторами, которые выполняют то или иное действие, в зависимости от класса транспорта.

		Или вы используете готовый UI-фреймворк для своего приложения. Но вот беда - требуется иметь круглые кнопки, вместо стандартных прямоугольных. Вы создаёте класс RoundButton. Но как сказать главному классу фреймворка UIFramework, чтобы он теперь создавал круглые кнопки, вместо стандартных? Для этого вы создаёте подкласс UIWithRoundButtons из базового класса фреймворка, переопределяете в нём метод создания кнопки (а-ля createButton) и вписываете туда создание своего класса кнопок. Затем используете UIWithRoundButtons вместо стандартного UIFramework.

	Решение

		Паттерн Фабричный метод предлагает создавать объекты не напрямую, используя оператор new, а через вызов особого фабричного метода. Объекты всё равно будут создаваться при помощи new, но делать это будет фабричный метод. Фабричный метод задаёт метод, который следует использовать вместо вызова оператора new для создания объектов. Подклассы могут переопределить этот метод, чтобы изменять тип создаваемых объектов. Зачастую фабричный метод объявляют абстрактным, чтобы заставить все подклассы реализовать его по-своему. Фабричный метод можно определить по создающим методам, которые возвращают объекты.

	Применимость

		Хорош для расширения системы, когда мы не знаем сколько еще будет дополнений.

	Пример на python

		class Creator:
		    """
		    Класс Создатель объявляет фабричный метод, который должен возвращать объект
		    класса. Подклассы Создателя обычно предоставляют реализацию этого метода.
		    """

		    @abstractmethod
		    def factory_method(self):
		        pass

		    def some_operation(self):
		        """
		        Также заметьте, что, несмотря на название, основная обязанность
		        Создателя не заключается только в создании. Обычно он содержит
		        некоторую базовую бизнес-логику.
		        """
		        pass


		"""Конкретные Создатели переопределяют фабричный метод для того, чтобы изменить тип, создаваемого объекта."""


		class ConcreteCreator1(Creator):
		    def factory_method(self):
		        return ConcreteProduct1()


		class ConcreteCreator2(Creator):
		    def factory_method(self):
		        return ConcreteProduct2()


		class Product:
		    """
		    Интерфейс Продукта объявляет операции, которые должны выполнять все
		    конкретные продукты.
		    """

		    @abstractmethod
		    def some_operation(self):
		        pass


		"""
		Конкретные Продукты предоставляют различные реализации интерфейса Продукта.
		"""


		class ConcreteProduct1(Product):
		    def some_operation(self):
		        pass


		class ConcreteProduct2(Product):
		    def some_operation(self):
		        pass


		def client_code(creator: Creator):
		    """
		    Клиентский код работает с экземпляром конкретного создателя, хотя и через
		    его базовый интерфейс. Пока клиент продолжает работать с создателем через
		    базовый интерфейс, вы можете передать ему любой подкласс создателя.
		    """
		    
		    pass


		if __name__ == "__main__":
		    client_code(ConcreteCreator1())
		    client_code(ConcreteCreator2())

Абстрактная фабрика

	Порождающий паттерн.

	Позволяет создавать семейства связанных объектов, не привязываясь к конкретным классам.

	Проблема

		Есть семейство зависимых продуктов - Кресло + Диван + Столик. И есть несколько вариаций этого семейства. Например Кресло, Диван и Столик представлены в трёх разных стилях: Ар-деко, Викторианском и Модерне. Вам нужен такой способ создавать объекты продуктов, чтобы они сочетались с другими продуктами того же семейства. То есть чтобы можно было легко создать столик, диван и кресло например в стиле модерн.

	Решение

		Определите продукты и их вариации.

		Выделите общие интерфейсы для отдельных продуктов.

		Определите интерфейс абстрактной фабрики. Он должен иметь методы для создания каждого продукта.

		Создайте классы конкретных фабрик, реализовав интерфейс абстрактной фабрики. Этих классов должно быть столько же, сколько и вариаций семейств продуктов и внутри они должны создавать продукты определенной вариации.

			class LinuxFactory:
				def create_button(self):
					return button

				def create_icon(self):
					return icon

		Измените код инициализации программы так, чтобы она создавала определённую фабрику и передавала её в клиентский код.

			if os == 'linux':
				factory = LinuxFactory()
			elif os == 'Win':
				factory = WinFactory()

		Замените в клиентском коде участки создания продуктов через конструктор вызовами соответствующих методов фабрики.

		В самом начале программа определяет с какой фабрикой будет работать (например из переменной окружения или файла конфигурации) затем создает объект этой фабрики и отдаёт его клиентскому коду.

		В дальнейшем клиент будет работать только с этой фабрикой, чтобы исключить несовместимость возвращаемых продуктов.

	Применимость

		Используется, когда программа должна работать с разными видами связанных друг с другом объектов (вариациями).

	Пример на python

		class AbstractFactory:
		    """
		    Интерфейс Абстрактной Фабрики объявляет набор методов, которые возвращают
		    различные абстрактные продукты.
		    """
		    @abstractmethod
		    def create_product_a(self):
		        pass

		    @abstractmethod
		    def create_product_b(self):
		        pass


		class ConcreteFactory1(AbstractFactory):
		    """
		    Конкретная Фабрика производит семейство продуктов одной вариации. Фабрика
		    гарантирует совместимость полученных продуктов. То есть стол + стол + кресло 
		    в стиле модерн.
		    """

		    def create_product_a(self):
		        return ConcreteProductA1()

		    def create_product_b(self):
		        return ConcreteProductB1()


		class ConcreteFactory2(AbstractFactory):


		    def create_product_a(self):
		        return ConcreteProductA2()

		    def create_product_b(self):
		        return ConcreteProductB2()


		class AbstractProductA:
		    """
		    Каждый отдельный продукт должен иметь базовый интерфейс.
		    Все вариации продукта должны реализовывать этот интерфейс.
		    """

		    @abstractmethod
		    def some_operation(self):
		        pass


		class ConcreteProductA1(AbstractProductA):
		    def some_operation(self):
		        pass


		class ConcreteProductA2(AbstractProductA):
		    def some_operation(self):
		        pass


		class AbstractProductB:
			"""
			Продукт "B" способен работать самостоятельно и иметь другие методы
	        """

		    @abstractmethod
		    def some_operation(self):
		        pass

		class ConcreteProductB1(AbstractProductB):
		    def some_operation(self):
		        pass

		class ConcreteProductB2(AbstractProductB):
		    def some_operation(self):
		        pass


		def client_code(factory: AbstractFactory):
		    product_a = factory.create_product_a()
		    product_b = factory.create_product_b()


		if __name__ == "__main__":
		    client_code(ConcreteFactory1())
		    client_code(ConcreteFactory2())

Строитель
	
	Порождающий паттерн.

	Позволяет создавать сложные объекты пошагово и даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.

	Проблема

		Нужно создать объект Дом. Чтобы построить стандартный дом, нужно поставить 4 стены, установить двери, вставить пару окон и положить крышу. Но что, если вы хотите дом побольше да посветлее, имеющий сад, бассейн и прочее добро? Самое простое решение - расширить класс Дом, создав подклассы для всех комбинаций параметров дома. Проблема такого подхода — это громадное количество классов, которые вам придётся создать. Каждый новый параметр, вроде цвета обоев или материала кровли, заставит вас создавать всё больше и больше классов для перечисления всех возможных вариантов. Чтобы не плодить подклассы, вы можете подойти к решению с другой стороны. Вы можете создать гигантский конструктор Дома, принимающий уйму параметров для контроля над создаваемым продуктом. Действительно, это избавит вас от подклассов, но приведёт к другой проблеме - большая часть этих параметров будет простаивать, а вызовы конструктора будут выглядеть монструозно из-за длинного списка параметров - new House(1, 2, 3, true, false, true)

	Решение

		Паттерн Строитель предлагает вынести конструирование объекта за пределы его собственного класса, поручив это дело отдельным объектам, называемым строителями.

		Паттерн предлагает разбить процесс конструирования объекта на отдельные шаги (например, построитьСтены, вставитьДвери и другие). Чтобы создать объект, вам нужно поочерёдно вызывать методы строителя. Причём не нужно запускать все шаги, а только те, что нужны для производства объекта определённой конфигурации.

	Применимость

		Когда нужно создавать большие и сложные объекты с перегруженным параметрами конструктором.

		Например дом или машина с большим кол-ом составляющих частей.

	Пример на python

		class Builder:
		    """
		    Интерфейс Строителя объявляет создающие методы для различных частей объекта.
		    """

		    @abstractproperty
		    def product(self):
		        pass

		    @abstractmethod
		    def produce_part_a(self):
		        pass

		    @abstractmethod
		    def produce_part_b(self):
		        pass

		    @abstractmethod
		    def produce_part_c(self):
		        pass


		class ConcreteBuilder1(Builder):
		    """
		    Классы Конкретного Строителя следуют интерфейсу Строителя и предоставляют
		    конкретные реализации шагов построения.
		    """

		    def __init__(self):
		        """
		        Новый экземпляр строителя должен содержать пустой объект продукта,
		        который используется в дальнейшей сборке.
		        """
		        self.reset()


		    def reset(self):
		    	self._product = Product1()
		    

		    @property
		    def product(self):
		        """
		        Конкретные Строители предоставляют свои собственные методы
		        получения результатов. Это связано с тем, что различные типы строителей
		        могут создавать совершенно разные продукты.

		        После возвращения конечного результата клиенту, экземпляр
		        строителя должен быть готов к началу производства следующего продукта.
		        Поэтому обычной практикой является вызов метода сброса в конце тела
		        метода.
		        """
		        product = self._product
		        self.reset()
		        return product

		    def produce_part_a(self):
		        self._product.add("PartA1")

		    def produce_part_b(self):
		        self._product.add("PartB1")

		    def produce_part_c(self):
		        self._product.add("PartC1")


		class Product1():
		    def __init__(self):
		        self.parts = []

		    def add(self):
		        self.parts.append(part)

		    def list_parts(self):
		        pass


		if __name__ == "__main__":
		    """
		    Клиентский код создаёт объект-строитель и инициирует процесс построения.
		    """

		    builder = ConcreteBuilder1()
		    builder.produce_part_a()
		    builder.produce_part_b()
		    builder.produce_part_с()

Одиночка

	Порождающий паттерн.

	Гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.

	Проблема

		Представьте, что вы создали объект, а через некоторое время пробуете создать ещё один и хотелось бы получить старый объект, вместо создания нового. Такое поведение невозможно реализовать с помощью обычного конструктора, так как конструктор класса всегда возвращает новый объект.

	Решение

		Все реализации одиночки сводятся к тому, чтобы скрыть конструктор по умолчанию и создать статический метод, который будет либо создавать объект, либо отдавать существующий объект, если он уже был создан.

		В отличие от глобальных переменных, Одиночка гарантирует, что никакой другой код не заменит созданный экземпляр класса.

	Применимость

		Чаще всего это полезно для доступа к какому-то общему ресурсу, например, базе данных, чтобы не открывать каждый раз новое соединение.

		Использовать, когда должен быть единственный экземпляр какого-то класса, доступный всем.

	Пример на python

		class App:
		    __instance = None

		    @staticmethod
		    def get_instance():
		        if App.__instance is None:
		            App.__instance = App()
		        return App.__instance


		print(App.get_instance(), App.get_instance())



