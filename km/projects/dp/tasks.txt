Оглавление

	Закрыть возможность создавать пользователей с одинаковым email

	Невозможно отменить заказы

	Проблема с апи MoneyCare

	Исправить отчет с состоянием обработки заказа

	Проблема с распаковкой zip архивов с ценами, номенклатурой и остатками диллера

	Товары без цен и остатков не отображаются на сайте

Закрыть возможность создавать пользователей с одинаковым email

	create

		url(r'^create/(?P<event_uuid>[0-9a-f|-]+)/$', create_customer, name='api_create_customer')

		http://127.1.0.1:8300/api/customer/create/4097a061-d6ae-4655-9823-84f7e83cbcd9

		dp_package/profile/form.py -> 

			class BaseCreateCustomerForm(RenderFormMixin, DateBirthValidationMixin

				def clean_email(self):

	auth

		url(r'^auth/$', authorization_customer, name='api_auth_customer')

		dp_package/profile/form.py 

			class AuthCustomerForm(RenderFormMixin, forms.Form):
				...
				def clean_email(self):
					email = self.cleaned_data['email'].lower()

			class EmailCustomerForm(forms.Form):
			    ...    
			    def clean_email(self):
			        #email = self.cleaned_data['email'].lower()

	request

		import requests

		requests.post('http://127.1.0.1:8300/api/customer/create/4097a061-d6ae-4655-9823-84f7e83cbcd9/', data = {'name': 'Ilya3', 'email': 'KADUK_IA@km-union.ru', 'password': 'asdf1234'})

		def create_customer_handler(post):

			...

			print create_customer_form.errors

	Вопросы:

		Все уже есть, в чем тогда проблема?

	Что

		Валидацию на почту.

		Имя почты одинаковое с верхним регистром, должно выдавать ошибку.

	Как

		Проверяем почту.

		Если есть символы в верхнем регистре, то показываем ошибку.

		Если нет, то разрешаем создать.

	Как

		re.findall(r'[A-ZА-Я]', a)

	Откуда удалить тестового пользователя

		customer_profile_customer

		SELECT 
			* 
		FROM 
			public.customer_profile_customer
		WHERE
			email = iliakia@mailforspam.com;

	Объединение контрагентов

		Поиск дублирующихся email в разном регистре

			SELECT lower(email) FROM customer_profile_customer GROUP BY lower(email) HAVING COUNT(lower(email))  > 1;
			​
			SELECT * FROM customer_profile_customer WHERE lower(email) IN (
				'evgenymv@inbox.ru',
				'kalinicheinko1991@mail.ru',
				'a.e.beydin@yandex.ru',
				'kazar1234789@gmail.com',
				'lierian@mail.ru',
				'kidenko.lana@mail.ru',
				'arturchikmuhomorchik@mail.ru',
				'lenok610395@yandex.ru',
				'lotedve@gmail.com'
			);

		Пользователя оставляем от той учетки под которой был сделан последний заказ

			SELECT
				customer_profile_customer.id,
				customer_profile_customer.email,
				orders_order.date_created
			FROM
				public.customer_profile_customer
					JOIN
				public.orders_order ON orders_order.customer_id = customer_profile_customer.id
			WHERE
				email IN ('evgenymv@inbox.ru', 'Evgenymv@inbox.ru')
				-- email IN ('kalinicheinko1991@mail.ru', 'Kalinicheinko1991@mail.ru')
				-- email IN ('a.e.beydin@yandex.ru', 'A.E.Beydin@yandex.ru')
				-- email IN ('kazar1234789@gmail.com', 'Kazar1234789@gmail.com')
				-- email IN ('lierian@mail.ru', 'Lierian@mail.ru')
				-- email IN ('kidenko.lana@mail.ru', 'Kidenko.lana@mail.ru')
				-- email IN ('arturchikmuhomorchik@mail.ru', 'Arturchikmuhomorchik@mail.ru')
				-- email IN ('lenok610395@yandex.ru', 'Lenok610395@yandex.ru')
				-- email IN ('lotedve@gmail.com', 'loTEDve@GMail.CoM')
			ORDER BY date_created DESC

		-------------------------------------------

			оставляем         удаляем

			evgenymv@inbox.ru, Evgenymv@inbox.ru
			-- есть 1 заказ у второго, передаем первому

			'kalinicheinko1991@mail.ru', 'Kalinicheinko1991@mail.ru'
			-- заказов нет ни у кого

			'a.e.beydin@yandex.ru', 'A.E.Beydin@yandex.ru'
			-- только у первого есть заказы, вторую просто удаляем

			'kazar1234789@gmail.com', 'Kazar1234789@gmail.com'
			-- только у первого есть заказы, вторую просто удаляем

			'lierian@mail.ru', 'Lierian@mail.ru'
			-- есть 1 заказ у второго, передаем первому

			'Kidenko.lana@mail.ru' 'kidenko.lana@mail.ru'
			-- второго удаляем, первого приводим к lower (заказ есть у первого)

			'arturchikmuhomorchik@mail.ru', 'Arturchikmuhomorchik@mail.ru'
			-- заказов нет ни у кого

			'lenok610395@yandex.ru', 'Lenok610395@yandex.ru'
			-- только у первого есть заказы, вторую просто удаляем

			'lotedve@gmail.com', 'loTEDve@GMail.CoM'
			-- заказов нет ни у кого

		-------------------------------------------

		-------------------------------------------

			-- evgenymv@inbox.ru, Evgenymv@inbox.ru
			-- есть 1 заказ у второго, передаем первому

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 154670, 
					customer_email = 'evgenymv@inbox.ru'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 154522;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 154670
			WHERE
				-- id удаляемого пользователя
				customer_id = 154522;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 154670
			WHERE
				-- id удаляемого пользователя
				customer_id = 154522;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 154522;

			------------------

			-- 'kalinicheinko1991@mail.ru', 'Kalinicheinko1991@mail.ru'
			-- 144342,						144251
			-- заказов нет ни у кого

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 144342, 
				    customer_email = 'kalinicheinko1991@mail.ru'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 144251;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 144342
			WHERE
				-- id удаляемого пользователя
				customer_id = 144251;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 144342
			WHERE
				-- id удаляемого пользователя
				customer_id = 144251;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 144251;

			------------------

			-- 'a.e.beydin@yandex.ru', 'A.E.Beydin@yandex.ru'
			-- 154244,					154243
			-- только у первого есть заказы, вторую просто удаляем

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 154244,
				    customer_email = 'a.e.beydin@yandex.ru'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 154243;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 154244
			WHERE
				-- id удаляемого пользователя
				customer_id = 154243;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 154244
			WHERE
				-- id удаляемого пользователя
				customer_id = 154243;

			-- переносим данные о юр лице
			UPDATE
				public.customer_profile_legalpersonalproperty
				-- id пользователя, которого оставляем
				SET customer_id = 154244
			WHERE
				-- id удаляемого пользователя
				customer_id = 154243;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 154243;

			------------------

			--'kazar1234789@gmail.com', 'Kazar1234789@gmail.com'
			-- 154555					153840
			-- только у первого есть заказы, вторую просто удаляем

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 154555, 
					customer_email = 'kazar1234789@gmail.com'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 153840;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 154555
			WHERE
				-- id удаляемого пользователя
				customer_id = 153840;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 154555
			WHERE
				-- id удаляемого пользователя
				customer_id = 153840;

			-- переносим данные о юр лице
			UPDATE
				public.customer_profile_legalpersonalproperty
				-- id пользователя, которого оставляем
				SET customer_id = 154555
			WHERE
				-- id удаляемого пользователя
				customer_id = 153840;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 153840;

			------------------

			-- 'lierian@mail.ru', 'Lierian@mail.ru'
			-- 156137				153634
			-- есть 1 заказ у второго, передаем первому

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 156137, 
					customer_email = 'lierian@mail.ru'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 153634;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 156137
			WHERE
				-- id удаляемого пользователя
				customer_id = 153634;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 156137
			WHERE
				-- id удаляемого пользователя
				customer_id = 153634;

			-- переносим данные о юр лице
			UPDATE
				public.customer_profile_legalpersonalproperty
				-- id пользователя, которого оставляем
				SET customer_id = 156137
			WHERE
				-- id удаляемого пользователя
				customer_id = 153634;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 153634;

			------------------

			-- 'Kidenko.lana@mail.ru' 'kidenko.lana@mail.ru'
			-- 154109					154261
			-- второго удаляем, первого приводим к lower (заказ есть у первого)

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 154109, 
					customer_email = 'kidenko.lana@mail.ru'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 154261;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 154109
			WHERE
				-- id удаляемого пользователя
				customer_id = 154261;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 154109
			WHERE
				-- id удаляемого пользователя
				customer_id = 154261;

			-- переносим данные о юр лице
			UPDATE
				public.customer_profile_legalpersonalproperty
				-- id пользователя, которого оставляем
				SET customer_id = 154109
			WHERE
				-- id удаляемого пользователя
				customer_id = 154261;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 154261;

			-- первого приводим к lower
			UPDATE
				public.customer_profile_customer
				SET email = 'kidenko.lana@mail.ru'
			WHERE
				-- id пользователя, которого оставляем
				customer_profile_customer.id = 154109;

			------------------

			--'arturchikmuhomorchik@mail.ru', 'Arturchikmuhomorchik@mail.ru'
			-- 150662							150660
			-- заказов нет ни у кого

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 150662, 
					customer_email = 'arturchikmuhomorchik@mail.ru'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 150660;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 150662
			WHERE
				-- id удаляемого пользователя
				customer_id = 150660;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 150662
			WHERE
				-- id удаляемого пользователя
				customer_id = 150660;

			-- переносим данные о юр лице
			UPDATE
				public.customer_profile_legalpersonalproperty
				-- id пользователя, которого оставляем
				SET customer_id = 150662
			WHERE
				-- id удаляемого пользователя
				customer_id = 150660;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 150660;

			------------------

			-- 'lenok610395@yandex.ru', 'Lenok610395@yandex.ru'
			-- 150881					150880
			-- только у первого есть заказы, вторую просто удаляем

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 150881, 
					customer_email = 'lenok610395@yandex.ru'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 150880;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 150881
			WHERE
				-- id удаляемого пользователя
				customer_id = 150880;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 150881
			WHERE
				-- id удаляемого пользователя
				customer_id = 150880;

			-- переносим данные о юр лице
			UPDATE
				public.customer_profile_legalpersonalproperty
				-- id пользователя, которого оставляем
				SET customer_id = 150881
			WHERE
				-- id удаляемого пользователя
				customer_id = 150880;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 150880;

			------------------

			-- 'lotedve@gmail.com', 'loTEDve@GMail.CoM'
			-- 157597				157596
			-- заказов нет ни у кого

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = 157597, 
					customer_email = 'lotedve@gmail.com'
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = 157596;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 157597
			WHERE
				-- id удаляемого пользователя
				customer_id = 157596;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 157597
			WHERE
				-- id удаляемого пользователя
				customer_id = 157596;

			-- переносим данные о юр лице
			UPDATE
				public.customer_profile_legalpersonalproperty
				-- id пользователя, которого оставляем
				SET customer_id = 157597
			WHERE
				-- id удаляемого пользователя
				customer_id = 157596;

			-- переносим точки доставки
			UPDATE
				public.customer_profile_deliverypoint
				-- id пользователя, которого оставляем
				SET customer_id = 157597
			WHERE
				-- id удаляемого пользователя
				customer_id = 157596;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 157596;

		-------------------------------------------

		Если ни под одной заказов не было тогда оставляем учетку созданную позже

			SELECT
				customer_profile_customer.email,
				customer_profile_customer.create_date AS customer_created
			FROM
				public.customer_profile_customer
			WHERE
				email IN ('evgenymv@inbox.ru', 'Evgenymv@inbox.ru')

		Переносим заказы пользователя

			UPDATE
				public.orders_order

				-- id пользователя, которого оставляем
				SET customer_id = 

			WHERE

				-- id удаляемого пользователя
				customer_id = 

		Переносим историю заказов

			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 

			WHERE
				-- id удаляемого пользователя
				customer_id = 

		Есть ли история обращений к обратной связи

			SELECT
				id
			FROM
				public.customer_profile_feedback
			WHERE
				customer_id =

		Помимо заказов так же необходимо объединить историю обращений в обратной связи

			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 
			WHERE
				-- id удаляемого пользователя
				customer_id = 

			Проверка

				SELECT
					id
				FROM
					public.customer_profile_feedback
				WHERE
					-- id пользователя, которого оставляем и id удаляемого пользователя
					customer_id =

		Настройки по уведомлению необходимо оставить от той учетки, чей будет оставлен пароль

			Просто удалили старого и все, потому что настройки это поле email_notice.

			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = 

		Шаблон переноса

			--	email IN (...)

			-- переносим заказы
			UPDATE
				public.orders_order
				-- id пользователя, которого оставляем
				SET customer_id = , 
					customer_email = 
			WHERE
				-- id удаляемого пользователя
				orders_order.customer_id = ;

			--	переносим обратную связь
			UPDATE
				public.customer_profile_feedback
				-- id пользователя, которого оставляем
				SET customer_id = 
			WHERE
				-- id удаляемого пользователя
				customer_id = ;

			-- переносим историю заказа
			UPDATE
				public.orders_historicalorder
				-- id пользователя, которого оставляем
				SET customer_id = 
			WHERE
				-- id удаляемого пользователя
				customer_id = ;

			-- переносим данные о юр лице
			UPDATE
				public.customer_profile_legalpersonalproperty
				-- id пользователя, которого оставляем
				SET customer_id = 
			WHERE
				-- id удаляемого пользователя
				customer_id = ;

			-- переносим точки доставки
			UPDATE
				public.customer_profile_deliverypoint
				-- id пользователя, которого оставляем
				SET customer_id = 
			WHERE
				-- id удаляемого пользователя
				customer_id = ;

			-- удаляем лишнего пользователя
			DELETE
			FROM
				public.customer_profile_customer
			WHERE
				-- id удаляемого пользователя
				id = ;

		Проверяем, что у удаляемого пользователя больше нет связанных данных

			Сохраняем сюда id удаляемого пользователя

				154522

				SELECT
					id
				FROM
					public.customer_profile_customer
				WHERE
					id = 154522
				UNION ALL
				SELECT
					id
				FROM
					public.orders_order
				WHERE
					customer_id = 154522
				UNION ALL
				SELECT
					id
				FROM
					public.orders_historicalorder
				WHERE
					customer_id = 154522
				UNION ALL
				SELECT
					id
				FROM
					public.customer_profile_legalpersonalproperty
				WHERE
					customer_id = 154522
				UNION ALL
				SELECT
					id
				FROM
					public.customer_profile_feedback
				WHERE
					customer_id = 154522

Невозможно отменить заказы

	У дилера из Ленинградской есть два заказа которые он не может отменить.

	dp пишет ошибку, что нельзя завершить уже завершенный заказ.

		По логике все верно.

	В админке в заказах статус "Завершено", а отображается в "необходимо связаться с покупателем".

	Смотреть на признак need_to_call.

	Вопросы:

		Где должны отображаться заказы со статусом "Отменен"?

			В разделе "Все заказы".

	orders_order - id - 157172

	Причина возникновения бага:

		Завершенный заказ не может быть завершен, пока диллер не нажал кнопку "Созвонились".

		Дмитрий Малашыхин говорит, что это ненормальное поведение и что возможно они когда то давно при тестировании допустили косяк.

		Сейчас этот косяк нужно исправить и давать возможность диллеру отменять заказ даже если он не созвонился с заказчиком.

	orders/urls/__init__.py

		wrapper_need_to_call_orders_view

	orders/views/arm.py

		NeedToCallOrdersView

Проблема с апи MoneyCare, 17835

	def check_status_order_in_money_care():

	    for mc_order in money_care_orders:
	        order = mc_order.order
	        response = requests.get(
	            url.format(settings.MONEY_CARE_URL, mc_order.mc_id),
	            headers=auth_header
	        )
	        print reponse
	        print auth_header

	Все ок.

	Сервер где находится https://mc1.moneycare.su установил сертификат.

	Dp делает запрос, получает в ответ сертификат, проверяется его в центре.

	Если не валидные выкидывает ошибку.

		Из модуля requests

			"Requests verifies SSL certificates for HTTPS requests, just like a web browser. By default, SSL verification is enabled, and Requests will throw a SSLError if it’s unable to verify the certificate"

Исправить отчет с состоянием обработки заказа

	На 29.10.19 очет по заказу 176360 формируется правильно, потому что по логам пользователь действительно нажал кнопку "готово" в 12:12:46, а start_order_process_time нужно посмотреть когда

	Как должно работать

		Появился заказ.

		На его обработку выделенно время.

		Если диллер нажимает кнопку "не дозвонился", то время перестает фиксироваться.

		Если закончился рабочий день диллера, то фиксация времени тоже останавливается.

	Проблема

		В заказе 146308 была нажата кнопка "Не дозвонился" но в отчете эта информация не отображается и время фиксации обработки заказа не остановилось.

		[14/Feb/2019:10:05:35 +0300] "POST /orders/submit/146308/need_to_call/?dealer_site=67

	Как работает кнопка "не дозвонился"?

		{'url': r'^submit/(?P<order_id>\d+)

			def need_to_call(self, request, order):

				end_order_process_time.send(Order, order_id=order.id,

				# обработчик сигнала end_order_process_time
				def end_process_time_handler(sender, order_id, **kwargs):

	Как проверяется время затраченное на обработку заказа?

		def check_time_order_processing():

			sms_recipient_list = list(

	Как посмотреть заказ и время его обработки в бд

		select * from public.orders_order where id = 176360

		select * from public.orders_orderprocessstate where order_id = 176360

		select * from public.orders_orderprocesstime where state_id = 153276

	Как найти заказ, чтобы нажать кнопку "готово"

		select id, site_id, state from public.orders_order where last_meta_status = 'ORDER_NEW_STATES'

	Как проверить, что диллер действительно нажимал ту или иную кнопку

		ssh web@192.168.7.54

		sudo mc (пароль см. в pass.txt)

		/var/log/nginx/dealer-price.access.log

		f3

		end

		?

		то, что нужно найти

		n - для того чтобы найти следующее вхождение

		Если нажимал "готово", то искать

			process/?dealer_site=17

			[28/Oct/2019:12:12:46 +0300] "POST /orders/submit/176360/process/?dealer_site=17

		Если нажимал "не дозвонился", то искать

			need_to_call/?dealer_site=67

	Вопросы заказчика:

		Ставится ли стоп, когда диллер нажал "не дозвонился"?

		А если через 3 дня нажал "дозвонился" то как считается время?

	Заказы диллера

		http://127.1.0.1:8300/orders/?dealer_site=67

	Состояние заказа

		http://127.1.0.1:8300/dpa/orders/orderprocessstate/123372/change/?_changelist_filters=q%3D146308

	Отчет

		http://127.1.0.1:8300/reports/

	Название отчета

		"Отчет об ошибках" или "Отчет об ошибках по заказам" (более подробный).

	Как формируется отчет в коде?

		REPORT_MAPPER = {

			ищем по параметрам из дата атрибута кнопки

				data-type="details-orders-errors"

	Поддомен

		stavropol.korallmicro.ru

	Время

		с 14 по 18 февраля 2019

	Проверка в админке dp

		163821

		/dpa/orders/order/163821/change/

		/dpa/orders/orderprocessstate/?q=163821

	Проверка в dp

		/orders/?dealer_site=67

	Проверка в pgadmin

		select * from public.orders_order where id = 146308

		update public.orders_order set fire=False where id = 146308

		update public.orders_order set need_to_call=False where id = 146308

		select * from public.orders_orderprocessstate where order_id = 146308

		select * from public.orders_orderprocesstime where state_id = 123372

		delete from public.orders_orderprocesstime where id = 178169

		update public.orders_orderprocesstime set end_time = null, reason_for_finish = null where id = 178169

	Сброс времени начала обработки

		bin/manage shell

		from orders.models import *

		ord_process_state = OrderProcessState.objects.get(order_id=

		ord_process_time = OrderProcessTime.objects.filter(state_id=ord_process_state.pk)

		ord_process_time.update(end_time=None, reason_for_finish=None)

	Cброс статуса заказа

		bin/manage shell

		from orders.models import *

		from datetime import timedelta

		ord = Order.objects.get(pk=

		ord.state='NEW'

		ord.last_meta_status='ORDER_NEW_STATES'

		ord.user_delivery_date_preference=datetime.now() + timedelta(days=1)
		
		ord.save()

		update public.orders_order set fire=False where id = 146308

	Какой статус получает заказ при создании?

		NEW

	Какой последний мета статус получает заказ при создании?

		ORDER_NEW_STATES

	В какой раздел попадает заказ со статусом New?

		В раздел "Заказ сформирован".

			class NewOrdersView(OrdersBaseView):

	Что такое OrderProcessState?

		Это таблица, где фиксируется статус заказа.

		По умолчанию заказ создается, как неошибочный. То есть поля error_start_time и error_end_time пустые, а has_error равно False.

	Что такое OrderProcessTime?

		Это таблица для учета времени обработки заказа.

	Когда начинается учет времени обработки заказа?

		from orders.views import *

		from orders.signals import start_order_process_time

		from orders.models import *

        start_order_process_time.send(Order, order_id=166467, reason_alias='ORDER_CREATED')

        	Обработчик:

        		start_order_process_time.connect(start_process_time_handler)

        		def start_process_time_handler(

    Когда останавливается учет времени обработки заказа?

    	from orders.views import *

		from orders.signals import end_order_process_time

        end_order_process_time.send(Order, order_id=order.id, reason_alias='NEED_TO_CALL')

    	Обработчик: 

    		end_order_process_time.connect(end_process_time_handler)

    		def end_process_time_handler(

    	Учет времени может остановиться если закончилось время работы магазина. Для обработки таких ситуация работает крон.

    		def check_time_order_processing():

    Как протестить

    	Создать через админку dp заказ

    	start_order_process_time.send(Order, order_id=76626, reason_alias='ORDER_CREATED')

    	ord_process_state = OrderProcessState.objects.get(order_id=76626)

    	print OrderProcessTime.objects.get(state_id=ord_process_state.pk)

    Как создается заказ?

		{'url': r'^new/$',

Проблема с распаковкой zip архивов с ценами, номенклатурой и остатками диллера

	Где задача, которая разархивирует?

		modules/main/tasks/remains_and_dealer_prices.py

	Очерёдность синхронизации

		синхронизация номенклатуры

		синхронизация остатков

		синхронизация цен

	Как протестировать разархивирование по одному?

		bin/manage shell

		from main.tasks.remains_and_dealer_prices import *

		синхронизация номенклатуры

	        unzip_uploaded_files.delay(
	        	file_path='/home/ilya/work/projects/dealer_price/csv/nomenclature_(63516090-a52d-11e4-80d4-001b21d8d330).zip', save_file_path='/home/ilya/work/projects/dealer_price/csv/nomenclature_(63516090-a52d-11e4-80d4-001b21d8d330).zip'
	        )

	        NomenclatureAddByBarcode().delay(
	        	file_path='/home/ilya/work/projects/dealer_price/csv/nomenclature_(63516090-a52d-11e4-80d4-001b21d8d330).zip', agreement_uuid='63516090-a52d-11e4-80d4-001b21d8d330'
	        )

	   	синхронизация остатков

			unzip_uploaded_files.delay(
				file_path='/home/ilya/work/projects/dealer_price/csv/remain_(63516090-a52d-11e4-80d4-001b21d8d330).zip', save_file_path='/home/ilya/work/projects/dealer_price/csv/remain_(63516090-a52d-11e4-80d4-001b21d8d330).zip'
			)
			
	        RemainAdd().delay(
	        	file_path='/home/ilya/work/projects/dealer_price/csv/remain_(63516090-a52d-11e4-80d4-001b21d8d330).zip', agreement_uuid='63516090-a52d-11e4-80d4-001b21d8d330'
	        )

        синхронизация цен

			unzip_uploaded_files.delay(
				file_path='/home/ilya/work/projects/dealer_price/csv/price_(63516090-a52d-11e4-80d4-001b21d8d330).zip', save_file_path='/home/ilya/work/projects/dealer_price/csv/price_(63516090-a52d-11e4-80d4-001b21d8d330).zip'
			)

	        PriceAdd().delay(
	        	file_path='/home/ilya/work/projects/dealer_price/csv/price_(63516090-a52d-11e4-80d4-001b21d8d330).zip', agreement_uuid='63516090-a52d-11e4-80d4-001b21d8d330'
	        )	

Товары без цен и остатков не отображаются на сайте

	SELECT *  FROM public.remains WHERE pid=197416;
	SELECT *  FROM public.prices WHERE pid=197416;
	SELECT *  FROM public.products WHERE id=197416;

	gps-навигатор
	из тех, что должен быть
	в базе сайта есть, published=true
	но нет цен и остатков
	есть ошибки с синками dp

	копаю тут
	new messages
	товар без цен и остатков не отображается на сайте

	Ошибка таска:

		Task sync with id a0dc4413-814a-49dd-985a-9643631aca4e raised exception:
		'AttributeError("\'NoneType\' object has no attribute \'uploaded_profile_id\'",)'

		Task was called with args: [] kwargs: {}.

		The contents of the full traceback was:

		Traceback (most recent call last):
		  File "/home/web/www/dealer_price-env/local/lib/python2.7/site-packages/celery/app/trace.py", line 240, in trace_task
		    R = retval = fun(*args, **kwargs)
		  File "/home/web/www/dealer_price-env/local/lib/python2.7/site-packages/celery/app/trace.py", line 438, in __protected_call__
		    return self.run(*args, **kwargs)
		  File "/home/web/www/dealer_price/modules/task_block/models.py", line 72, in _inner
		    result = func(self, *args, **kwargs)
		  File "/home/web/www/dealer_price/modules/main/tasks/__init__.py", line 25, in sync
		    autoupload_changed_profiles.si()
		  File "/home/web/www/dealer_price-env/local/lib/python2.7/site-packages/celery/canvas.py", line 181, in apply
		    return self.type.apply(args, kwargs, **options)
		  File "/home/web/www/dealer_price-env/local/lib/python2.7/site-packages/celery/app/builtins.py", line 302, in apply
		    last and (last.get(), ),
		  File "/home/web/www/dealer_price-env/local/lib/python2.7/site-packages/celery/result.py", line 874, in get
		    raise self.result
		AttributeError: 'NoneType' object has no attribute 'uploaded_profile_id'

	Место, где падает:

		@app.task(name='compute_product_charge', routing_key='sync')
		@transaction.atomic
		@loger_decorator
		def compute_product_charge(uuids, profile_id=None):

	Запуск всей цепочки:

		bin/celery call -A app_celery sync --queue=default

			чтобы корректно отработал нужно DEBUG = False

	Цепочка

		/modules/main/tasks/__init__.py

			def sync(self):

				FilialSync().si()

		/modules/main/tasks/remains_and_dealer_prices.py

			self.sync_remains(agreement_uuid, main_store_uuids, stores)

				self.sync(agreement_uuid, main_remains_dict, current_main_remain_dict, 'main_remain')

	Запросы

		select	
			*
		from
			public.main_product
		where
			code = 187231

		--

		select
			*
		from
			public.main_price
		where
			id = 187231

		--

		select
			*
		from
			public.main_remains
		where
			product_id = '506d8386-5ff9-11e7-80c8-6805ca44419c'

		--

		select
			*
		from
			public.main_dealersite
		where
			id in (1, 28)

	Лента

		25.09.19

			конкретно по этому товару - точку останова можно сюда поставить:
			   neighbor_remains = {}
			modules/main/tasks/profiles.py
			вероятно
			по товару 187231

			-------

			Я правильно понимаю, что все отрабатывает, но как бы и не все?))))
			shadow 2:51 PM
			или по товарам еще, которые есть в остатках в 1С (рав), но нет на коралле
			ага)
			отрабатывают синки, не падая
			но странности какие-то возникают

		26.09.19

			Нет остатков в таблице main_remains
