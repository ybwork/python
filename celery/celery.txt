Оглавление

	Что это

	Где и когда использовать

	Что умеет

	Советы по работе

	Установка и настройка

	Команды

Что это

	Celery - это инструмент, который позволяет выполнять задачи в фоновом режиме. Или распределённая очередь задач.

Где и когда использовать

	Использовать всё в одном процессе веб-сервера это плохая идея, потому что время отклика приложения будет долгим. Например после успешного заказа пользователем билета на самолёт мы должны отправить ему сообщение на почту, забронировать место другую стороннюю систему и провести платёж в 1С. Именно в такой ситуации напомощь нам приходит Celery. 

	Если нет обмена задачами между приложениями, то можно использовать только Celery.

	Если задача простая, то лучше использовать что-нибудь полегче, чем Celery.

	Более простая альтернатива Celery это RQ.

	Celery может выступать в качестве поставщика сообщений в брокер.

Что умеет

	Выполнять задания асинхронно или синхронно

	Выполнять периодические задания

	Выполнять отложенные задания

	Распределенное выполнение (может быть запущен на N серверах)

	В пределах одного worker'а возможно конкурентное выполнение нескольких задач (одновременно)

	Выполнять задание повторно, если вылез exception

	Ограничивать количество заданий в единицу времени (rate limit, для задания или глобально)

	Routing заданий

	Выполнять подзадания

	Присылать отчеты об exception на email

	Проверять выполнилось ли задание

Советы по работе

	Не использовать базу данных в качестве брокера

		Брокер отвечает за передачу задач исполнителям.
		
		База данных не предназанченна для того, чтобы быть брокером.

		С ростом количества исполнителей, нагрузка на базу будет только возрастать.

	Разделять задачи по очередям

		Если все задачи складировать в одну очередь, то в один прекрасный момент она может забиться, поставив под угрозу выполнение критически важного кода.

		Как вариант можно разделять очереди по приоритетам: high, normal, low.

	Не запускать исполнителей без привязке к очереди

		При использовании раздельных очередей задач, не запускайте исполнителей без указания для них явного наименования очереди, потому что если например все исполнители, которые слушают очередь high будут заняты, то celery автоматом отправит новую задачу исполнителям без конкретной очереди.

	Логгировать ошибки

		По-умолчанию Celery все ошибки пишет в stderr.

		Контролировать вывод ошибок можно через стандартный python logging, достаточно повесить свой handler на logger под названием celery.

	Писать маленькие задачи и разносить части логики по отдельным методам

		Например, если вам необходимо генерировать и отправлять отчёт, то не нужно в самом task писать код генерации и отправки. Разбейте его на 2 части: 

			метод генерации отчёта

			метод отправки письма

		А внутри метода задачи вызываем 2 метода, которые делают всю работу.

	Гасите вовремя задачи

		Явно указывайте временной лимит на выполнение задачи.

		Это нужно делать, потому что в некоторых случаях его отсутствие попросту приведёт к зависанию исполнителя.

	Не хранить результаты исполнения без необходимости

		Если результаты всё-таки нужно хранить, то лучше это делать в redis.

	Не использовать ORM объекты в качестве аргументов

		Лучшим решением будет передача идентификатора объекта в базе данных, а в самой task функции необходимо непосредственно обращаться к объекту через его id.

	Задавать visibility_timeout равным самому длительному eta/countdown в вашем проекте

		При использовании отложенных задач может случиться так, что одну задачу будут выполнять все воркеры.

		Это происходит

