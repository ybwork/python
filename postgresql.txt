Оглавление

	Что это

	Установка

	Нормальные формы

	DQL

	DML

	DDL

	Транзакции	

	Проблемы при паралельном выполнении транзакций

	Блокировка

	Уровни изоляции

Что это

	PostgreSQL — это объектно-реляционная система управления базами данных

	Реляционная система управления базами данных - это система, которая позволяет хранить данные в структурированном и целостном виде.

Установка

	...

DQL

	Data Query Language - язык запросов, составная часть SQL. Состоит из единственной команды SELECT.

	Команда SELECT позволяет получить данные из бд.

	С командой SELECT можно использовать следующие команды:

	FROM - из какой таблице берём данные

	WHERE - условие по которому выбираются данные

	JOIN - присоединение таблиц

	ON - условие для JOIN

	USING - условие JOIN если имена полей разных таблиц одинаковы (USING (a, b) формирует условие ON T1.a = T2.a AND T1.b = T2.b)

	GROUP BY - группирует строки таблицы, объединяя их в одну группу при совпадении значений (например в таблице есть product_id и их значения совпадают)

	HAVING - позволяет задать условие после группировки и оставить только нужные группы строк

	ORDER BY - позволяет задать порядок выбора данных (по убыванию DESC или по возрастанию ASC)

	UNION - обьединяет вывод двух или более SQL запросов в единый набор строк и столбцов. Все запросы выполняются независимо друг от друга, а уже вывод их — обьединяется. Столбцы вывода должны быть совместимы для объединения.

	Subqueries - позволяют сделать один запрос внутри другого.

DML

	Data Manipulation Language - язык запросов для манипулирования данными, составная часть SQL. 

	Включает в себя такие команды, как: 

	INSERT - добавляет данные в таблицу 

	UPDATE - обновляет данные в таблице 

	DELETE - удаляет данные из таблицы

DDL

	Data Definition Language - язык описания данных.

	У базы данных есть таблицы.

	У таблиц есть столбцы.

	Каждый имеет свой тип данных.

	Для каждого типа можно задать свою длинну.

	В каждой таблице есть записи, они же строки.

	Уникальность каждой строки гарантирует первичный ключ, который имеет уникальное, не повторяющееся значение

	Целостность данных гарантируют внешние ключи, которые связывают одну таблицу с другой.

	С помощью DDL можно описать, создать и модифицировать структуру БД.

Транзакции

	Это операция состоящая из какого-либо набора действий, которые либо выполняется полностью, либо не выполняются вообще.

Проблемы при паралельном выполнении транзакций

	Потерянное обновление

		Обе транзации делают обновление. 

		Первая читает текущее значение поля, которое нужно обновить. 

		Вторая читает это же значение поля до завершения первой. 

		Получается обе при чтении получают одинаковое значение.

		В итоге первая транзакция завершается и записывает новое значение, а вторая при своём завершении перезаписывает значение первой.

	Грязное чтение

		Первая изменила данные, пошла дальше. 

		Вторая увидела изменения первой. Первая не доработала и откатилась. 

		Вторая продолжила работать с неактуальными данными и завершилась.

	Неповторяющееся чтение

		В первой транзакции происходит две одинаковые операции выбора значения поля.

		После первой операции выбора (первой транзакцией), вторая транзакция изменяет значение выбираемого поля.

		При второй операции выбора первой транзакцией мы получаем совсем другое значение поля.

	Чтение фантомов

		В первой транзакции происходит две одинаковые операции выбора значения поля.

		После первой операции выбора (первой транзакцией), вторая транзакция добавляет новую запись в таблицу.

		При второй операции выбора первой транзакцией мы получаем совсем другое значение поля.

		Отличие чтения фантомов от неповторяющегося чтения в том, что при фантомном создаётся новая запись, а при неповторяющемся запись удаляется или изменяется.

Уровни изоляции

	Транзакции могут выполняться паралельно.

	Если транзакции будут недостаточно изолированы друг от друга могут возникнуть следующие проблемы:

		Грязное чтение - транзакция читает часть записанных данных параллельной незавершённой транзакцией

			Первая изменила данные, пошла дальше. Вторая увидела изменения первой. Первая не доработала и откатилась. Вторая продолжила работать с неактуальными данными.

		Неповторяемое чтение - транзакция повторно читает те же данные, что и раньше, и обнаруживает, что они были изменены другой транзакцией

		Фантомное чтение - транзакция повторно выполняет запрос и обнаруживает, что набор строк, удовлетворяющих условию, изменился из-за транзакции, завершившейся за это время

		Аномалия сериализации - результат успешной фиксации группы транзакций оказывается несогласованным при всевозможных вариантах исполнения этих транзакций (даже если использовали очередь)

	Уровни изоляции транзакций:

		Read committed (Чтение зафиксированных данных)

			Выбран по умолчанию.

			На этом уровне в процессе работы одной транзакции другая может быть успешно завершена и сделанные ею изменения зафиксированы. В итоге первая транзакция будет работать с другим набором данных.

		Read uncommited (Чтение незафиксированных данных)

			Если несколько параллельных транзакций пытаются изменять одну и ту же строку таблицы, то в окончательном варианте строка будет иметь значение, определенное всем набором успешно выполненных транзакций.

			Типичный способ реализации данного уровня изоляции — блокировка данных на время выполнения команды изменения, что гарантирует, что команды изменения одних и тех же строк, запущенные параллельно, фактически выполнятся последовательно, и ни одно из изменений не потеряется. 

			Транзакции, выполняющие только чтение, при данном уровне изоляции никогда не блокируются.

		Repeatable read (Повторяемое чтение)

			Уровень, при котором читающая транзакция не видит изменения данных, которые были ею ранее прочитаны. При этом никакая другая транзакция не может изменять данные, читаемые текущей транзакцией, пока та не окончена.

		Serializable (Сериализуемость)

			Самый высокий уровень изолированности. Транзакции полностью изолируются друг от друга, каждая выполняется так, как будто параллельных транзакций не существует.

Блокировка

	Как работает механизм.

	Блокировка - отметка о захвате объекта транзакцией с целью предотвращения коллизий и поддержания целостности данных.

	Виды:

		Строчная блокировка - действуют только на одну строку таблицы базы данных, не ограничивая манипуляции над другими строками таблицы.

		Гранулярная блокировка - действует на всю таблицу или всю страницу и все строки. 

		Совместная блокировка - накладывается транзакцией на объект в случае, если выполняемая ей операция безопасна, то есть не изменяет никаких данных и не имеет побочных эффектов. При этом, все транзакции могут выполнять операцию того же типа над объектом

		Исключительная блокировка - накладывается транзакцией на объект в случае, если выполняемая ей операция изменяет данные. Только одна транзакция может выполнять подобную операцию над объектом, если на него наложена эксклюзивная блокировка. 

		Пессимистическая блокировка - накладывается перед предполагаемой модификацией данных на все строки, которые такая модификация предположительно затрагивает.

		Оптимистическая блокировка - не ограничивает модификацию обрабатываемых данных. Перед записью модификаций в базу данных перепроверяется значение выделенного атрибута, и если оно изменилось, то транзакция откатывается или применяются различные схемы разрешения коллизий.

psql: кластер, 2 важных файла (pg_conf - порты, местоположения директории для хранения, логирование-slow_log, система контроля доступа-pg_hba, VACUUM, )

Роли

	PostgreSQL использует концепцию ролей для управления разрешениями на доступ к базе данных.

	Роль можно рассматривать как пользователя базы данных или как группу пользователей, в зависимости от того, как роль настроена.

	Роли могут владеть объектами базы данных (например, таблицами и функциями) и выдавать другим ролям разрешения на доступ к этим объектам.

	Концепция ролей включает в себя концепцию пользователей («users») и групп («groups»).

	Любая роль может использоваться в качестве пользователя, группы, и того и другого.

Резервное копирование и восстановление

	Существует три фундаментально разных подхода к резервному копированию данных в PostgreSQL:

		Выгрузка в SQL

			Идея, стоящая за этим методом, заключается в генерации текстового файла с командами SQL, которые при выполнении на сервере пересоздадут базу данных в том же самом состоянии, в котором она была на момент выгрузки. PostgreSQL предоставляет для этой цели вспомогательную программу pg_dump.

			Но помните, что pg_dump не использует для своей работы какие-то специальные привилегии. В частности, ей обычно требуется доступ на чтение всех таблиц, которые вы хотите выгрузить, так что для копирования всей базы данных практически всегда её нужно запускать с правами суперпользователя СУБД.

			Важное преимущество pg_dump в сравнении с другими методами резервного копирования, описанными далее, состоит в том, что вывод pg_dump обычно можно загрузить в более новые версии PostgreSQL, в то время как резервная копия на уровне файловой системы и непрерывное архивирование жёстко зависят от версии сервера. Также, только метод с применением pg_dump будет работать при переносе базы данных на другую машинную архитектуру, например, при переносе с 32-битной на 64-битную версию сервера.

			pg_dump не блокирует другие операции с базой данных во время своей работы. (Исключение составляют операции, которым нужна исключительная блокировка, как например, большинство форм команды ALTER TABLE.)

			Программа pg_dump выгружает только одну базу данных в один момент времени и не включает в дамп информацию о ролях и табличных пространствах (так как это информация уровня кластера, а не самой базы данных). Для удобства создания дампа всего содержимого кластера баз данных предоставляется программа pg_dumpall, которая делает резервную копию всех баз данных кластера, а также сохраняет данные уровня кластера, такие как роли и определения табличных пространств.

			Некоторые операционные системы накладывают ограничение на максимальный размер файла, что приводит к проблемам при создании больших файлов с помощью pg_dump. К счастью, pg_dump может писать в стандартный вывод, так что вы можете использовать стандартные инструменты Unix для того, чтобы избежать потенциальных проблем. (см. доку)

		Копирование на уровне файлов

			Альтернативной стратегией резервного копирования является непосредственное копирование файлов, в которых PostgreSQL хранит содержимое базы данных.

			Существуют два ограничения, которые делают этот метод непрактичным или как минимум менее предпочтительным по сравнению с pg_dump:

				Чтобы полученная резервная копия была годной, сервер баз данных должен быть остановлен.

				Если вы ознакомились с внутренней организацией базы данных в файловой системе, у вас может возникнуть соблазн скопировать или восстановить только отдельные таблицы или базы данных в соответствующих файлах или каталогах. Это не будет работать, потому что информацию, содержащуюся в этих файлах, нельзя использовать без файлов журналов транзакций.

		Непрерывное архивирование

			Всё время в процессе работы PostgreSQL ведёт журнал предзаписи (WAL)

			Можно сочетать резервное копирование на уровне файловой системы с копированием файлов WAL. 

			Если потребуется восстановить данные, мы можем восстановить копию файлов, а затем воспроизвести журнал из скопированных файлов WAL, и таким образом привести систему в нужное состояние. 





	

		