Оглавление

	Что это

	Установка

	Нормальные формы

	DQL

	DML

	DDL

	Транзакции	

	Проблемы паралельных транзакций

	Уровни изоляции

	Блокировка

	Кластер

	pg_config (порты, местоположения директории для хранения)

	Система контроля доступа

	Логирование (slow_log)

	VACUUM

Что это

	PostgreSQL — это объектно-реляционная система управления базами данных

	Реляционная система управления базами данных - это система, которая позволяет хранить данные в структурированном и целостном виде.

Установка

	...

DQL

	Data Query Language - язык запросов, составная часть SQL. Состоит из единственной команды SELECT.

	Команда SELECT позволяет получить данные из бд.

	С командой SELECT можно использовать следующие команды:

	FROM - из какой таблице берём данные

	WHERE - условие по которому выбираются данные

	JOIN - присоединение таблиц

	ON - условие для JOIN

	USING - условие JOIN если имена полей разных таблиц одинаковы (USING (a, b) формирует условие ON T1.a = T2.a AND T1.b = T2.b)

	GROUP BY - группирует строки таблицы, объединяя их в одну группу при совпадении значений (например в таблице есть product_id и их значения совпадают)

	HAVING - позволяет задать условие после группировки и оставить только нужные группы строк

	ORDER BY - позволяет задать порядок выбора данных (по убыванию DESC или по возрастанию ASC)

	UNION - обьединяет вывод двух или более SQL запросов в единый набор строк и столбцов. Все запросы выполняются независимо друг от друга, а уже вывод их — обьединяется. Столбцы вывода должны быть совместимы для объединения.

	Subqueries - позволяют сделать один запрос внутри другого.

DML

	Data Manipulation Language - язык запросов для манипулирования данными, составная часть SQL. 

	Включает в себя такие команды, как: 

	INSERT - добавляет данные в таблицу 

	UPDATE - обновляет данные в таблице 

	DELETE - удаляет данные из таблицы

DDL

	Data Definition Language - язык описания данных.

	У базы данных есть таблицы.

	У таблиц есть столбцы.

	Каждый имеет свой тип данных.

	Для каждого типа можно задать свою длинну.

	В каждой таблице есть записи, они же строки.

	Уникальность каждой строки гарантирует первичный ключ, который имеет уникальное, не повторяющееся значение

	Целостность данных гарантируют внешние ключи, которые связывают одну таблицу с другой.

	С помощью DDL можно описать, создать и модифицировать структуру БД.

Транзакции

	Это операция состоящая из какого-либо набора действий, которые либо выполняется полностью, либо не выполняются вообще.

Проблемы паралельных транзакций

	Потерянное обновление

		Обе транзации делают обновление. 

		Первая читает текущее значение поля, которое нужно обновить. 

		Вторая читает это же значение поля до завершения первой. 

		Получается обе при чтении получают одинаковое значение.

		В итоге первая транзакция завершается и записывает новое значение, а вторая при своём завершении перезаписывает значение первой.

	Грязное чтение

		Первая изменила данные, пошла дальше. 

		Вторая увидела изменения первой. Первая не доработала и откатилась. 

		Вторая продолжила работать с неактуальными данными и завершилась.

	Неповторяющееся чтение

		В первой транзакции происходит две одинаковые операции выбора значения поля.

		После первой операции выбора (первой транзакцией), вторая транзакция изменяет значение выбираемого поля.

		При второй операции выбора первой транзакцией мы получаем совсем другое значение поля.

	Чтение фантомов

		В первой транзакции происходит две одинаковые операции выбора значения поля.

		После первой операции выбора (первой транзакцией), вторая транзакция добавляет новую запись в таблицу.

		При второй операции выбора первой транзакцией мы получаем совсем другое значение поля.

		Отличие чтения фантомов от неповторяющегося чтения в том, что при фантомном создаётся новая запись, а при неповторяющемся запись удаляется или изменяется.

Уровни изоляции

	Уровни изоляции - это механизм субд, который позволяет избавиться от проблем паралельных транзакций.

	Read uncommited

		Чтение незафиксированных данных.

		Решает только проблему потерянного обновления.

		В результате значение поля будет такое, как если бы все транзакции выполнились по очереди и каждая последующая брала актуальные данные.

		Реализуется с помощью блокировки данных при изменении.

		Транзакции, выполняющие только чтение, при данном уровне изоляции никогда не блокируются.

	Read committed 

		Чтение зафиксированных данных

		В postgresql выбран по умолчанию.

		Решает проблему грязного чтения.

		Реализуется с помощью блокировки читаемых и изменяемых данных. Транзакция, которая изменяет данные, блокирует эти данные для чтения.

		....

		При этом есть доступ к созданным данным.

	Repeatable read (Повторяемое чтение)

		Уровень, при котором читающая транзакция не видит изменения данных, которые были ею ранее прочитаны. При этом никакая другая транзакция не может изменять данные, читаемые текущей транзакцией, пока та не окончена.

	Serializable (Сериализуемость)

		Самый высокий уровень изолированности. Транзакции полностью изолируются друг от друга, каждая выполняется так, как будто параллельных транзакций не существует.

Блокировка

	Блокировка - отметка о захвате объекта транзакцией с целью предотвращения коллизий и поддержания целостности данных.

	Виды:

		Строчная блокировка - действуют только на одну строку таблицы базы данных, не ограничивая манипуляции над другими строками таблицы.

		Гранулярная блокировка - действует на всю таблицу или всю страницу и все строки. 

		Совместная блокировка - накладывается транзакцией на объект в случае, если выполняемая ей операция безопасна, то есть не изменяет никаких данных и не имеет побочных эффектов. При этом, все транзакции могут выполнять операцию того же типа над объектом

		Исключительная блокировка - накладывается транзакцией на объект в случае, если выполняемая ей операция изменяет данные. Только одна транзакция может выполнять подобную операцию над объектом, если на него наложена эксклюзивная блокировка. 

		Пессимистическая блокировка - накладывается перед предполагаемой модификацией данных на все строки, которые такая модификация предположительно затрагивает.

		Оптимистическая блокировка - не ограничивает модификацию обрабатываемых данных. Перед записью модификаций в базу данных перепроверяется значение выделенного атрибута, и если оно изменилось, то транзакция откатывается или применяются различные схемы разрешения коллизий.



	

		