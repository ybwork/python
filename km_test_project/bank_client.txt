Аутентификация

	Первым запросом приложение отправляет в банк клиент api_key и номер рассчётного счёта покупателя

	Когда клиент нажал "оплатить", банк должен удостовериться, что это действие действительно от клиента банка

	Банк находит email пользователя (в идеале телефон) по рассчётному счёту и отправляет код подтверждения

	Клиент вводит код и если он совпадает, то выполняется запрашиваемая операция.

Cчёт

	id банка + os.urandom(5)

Баланс

	Вход

		Формат json

		Апи кей

		Номер расч. счёта

	Процесс

		Пришёл запрос

		С помощью вспомогательной фукнции get_balance получили баланс клиента

		Вернули баланс

	Выход

		Статус код

		Баланс в формате json

Оплата

	Вход

		Формат json

		Апи кей

		Номер расч. счёта продавца

		Номер расч. счёта покупателя

		Стоимость "предложения"

	Процесс

		Переводит данные в валидный формат.

		Проверяем баланс.

		Если не хватает денег, то сообщаем.

		Если хватает, то проверяем банки.

		Если разные, то считаем процент и начинаем процесс снятия-зачисления.

		Если одинаковые, то сразу начинаем процесс снятия-зачисления.

		Процесс снятия-зачисления проходит в транзакции:

			Съём денег со счёта покупателя

			Перевод денег на счёт продавца

		Если транзакция не прошла, то сообщаем об этом покупателю.

		Если транзакция прошла, то возвращаем торговой площадке ответ.

	Выход

		Статус код

		Ключ операции

Возврат

	Что делать с процентом при возвратае? (например зачислили сумму на счёт клиента и часть суммы на счёт банка)

	Вход

		Апи кей

		Ключи операций

	Процесс

		После каждой оплаты банк клиент генерирует ключ операции и отправляет вместе с ответом в торговую площадку

		Торговая площадка сохраняет этот ключ у себя и связывает его с "предложением"

		Когда потребуется вернуть все средства по "предложению", мы собирём все ключи транзакции, отправляем в банк клиент и он делает возврат

	Выход

		Статус код

Бд
	banks
	id  name  balance
	1   sber  10 000 000
	2   alfa  20 000 000

	clients
	id  name
	1   mike
	2   jane

	banks_clients
	id  bank_id  client_id  number_invoice  balance
	1   1        1          1xf3g           10000  
	2   1        2          1ck3l           300000
	3   2        1          2mzp5           25000

	banks_percents
	id  bank_provider  bank_reciever  percent  min_amount_money
	1   1              2              5        50
	2   2              1              2        100

	statuses_operation
	id  status
	1   success
	2   pause

	operations
	id  key  amount_money  number_invoice_provider  number_invoice_reciever  status
	1   3d!  200           1xf3g                    2mzp5                    2

Вспомогательные функции api

	to_valid_format() - преобразовывает входные параметры в нужный формат для api

	enough_money() - проверяет хватает ли денег на счёте клиента

	get_balance() - возвращает баланс клиента

	get_money() - снимает деньги со счёта

	add_money() - зачисляет деньги на счёт

	is_different_banks() - проверяет банки (если разные то будет считаться процент)

	count_percent() - считает процент

Методы api

	.../balance

		Вход

			{
				"api_key": "sfxf2d@3",
				"number_invoice_seller": "3fj5#",
			}

		Процесс

			to_valid_format()

			balance()

				get_balance()

		Выход

			status_code: 200

			{
				"balance": "350000"
			}

	.../pay

		Вход

			{
				"api_key": "sfxf2d@3",
				"number_invoice_seller": "3fj5#",
				"number_invoice_customer": "4csjp%*",
				"price": "2000"
			}

		Процесс

			to_valid_format()

			enough_money()

			if is_different_banks()

				count_percent()

			transaction

				get_money()

				add_money()

		Выход

			status_code: 200

			{
				"operation_key": "sfxf2d@3",
			}

	.../refund

		Вход

			{
				"operation_keys": ["1fxf2d#3", "5fxf2d@3", "4fxf2d*3"],
			}

		Процесс

			to_valid_format()

			логика возврата

		Выход

			status code: 200
