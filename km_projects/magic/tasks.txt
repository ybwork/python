Оглавление

	Общая инфа

	Смена шаблона у Вид/Подвид refs #16647

Общая инфа

	В magic хранится дополнительная информация по товару, которая не должна храниться в 1С (в т.ч. карточки товаров)

Смена шаблона у Вид/Подвид refs #16647

	На 28.02.2019 работает так

		Есть карточка товара, модель ProductCard.

		В карточке товара находится полное описание товара.

		У карточки товара есть вид-тип (ноутбук-ультрабук), модель Kind.

		У вида-типа есть шаблон, модель Template. Для связи шаблона с видом-типом используется модель Property.

		У шаблона есть атрибуты, модель TemplateEntry. Этот набор атрибутов нужен для того, чтобы было понятно, какие атрибуты имеет карточка товара.

		Карточка товара имеет значения атрибутов. Смотреть модели Attribute, AttributeOptions, AttributeOptionValue.

		Значения атрибутов для карточки добавляет пользователь после создания карточки товара, при её редактировании.

		Пользователь может изменить шаблон для вида-типа в 1С и в magic (раздел "Свойства").

		Когда пользователь меняет шаблон у вида-типа в magic (раздел "Свойства"), то весь набор атрибутов у карточки товара тоже меняется. Потому что вид-тип привязан к карточке товара. Соответсвенно это приводит к тому, что все значения атрибутов карточки товара теряются.

	Варианты работы от Глубокова

		1. Когда в 1С заведен новый вид-тип в данном случае ничего не надо делать, т.к. у нового вида-типа, нет никакого шаблона.

		2. Смена шаблона в magic

			пример: http://magic.km-union.ru/cards/property/56/change/?_changelist_filters=q%3D%25D0%25BD%25D0%25BE%25D1%2583%25D1%2582

			Случай, когда я меняю привязку шаблона, к определенному виду-типу.

			В данном случае, должно пройти сравнение нового и старого шаблона, проверка всех совпадающих значений атрибутов, а по не совпадающим, приходило бы уведомление, по каким не прошла проверка.

		3. Переименовывание вид/подвид в 1С

			Тут надо ответ от вас, что произойдет в данному случае?

			Появится в magic, новая связка вид-тип или поменяется уже существующая, с сохранением привязки шаблона и карточек товара!

				Судя по коду появится новая связка вид-тип - (modules/cards/tasks.py/def sync_kinds)

			Если это второй случай, то должны пройти все те же процедуры, что описаны во втором пункте.

			Для 2 и 3 пункта, если поменялся шаблон, то карточки товаром, которые переподтвердились автоматически, им так же должен быть обновлен слепок на обоих сайтах.

	Задача

		При смене шаблона у вида-типа в magic и/или 1С нужно:

			значения совпадающих атрибутов сохранялись 

			карточки товара у которых изменился шаблон помечались, как не актуальные

			администратор получал уведомление о смене шаблонов у карточек товара

				текст письма при смене шаблона, должен содержать: код карточки товара (должны быть кликабельным), имя карточки товара, смена шаблона "с/на" какой (должны быть кликабельными), несовпавщие атрибуты

		Когда шаблон меняется в 1С magic узнает об этом в момент синхронизации. Смотреть задачу check_kind_id_in_cards в modules/cards/tasks.py 

	Отображение атрибутов карточки товара

		Все поля формы берутся через метод get_preview_template_fields модели Kind и добавляются в методе get_form класса ProductCardAdmin.

		    try:
                template = obj.kind.template
            except Template.DoesNotExist:
                return form

            if template:
                form.base_fields.update(template.get_fields(obj))

-----------------------------------------------------------------

attr_old_list = self.compare_templates(
    # делаю так, потому что нет доступа к старому шаблону
    template_old=Property.objects.get(pk=obj.pk).template,
    template_new=obj.template
)

product_card_list = obj.kind.cards.all()

Attribute.objects.filter(
    options__in=attr_old_list
).filter(
    card__pk__in=product_card_list.values_list('pk')
).delete()

self.create_report_about_attr_sync(
    product_card_list=product_card_list
)

self.mark_product_cards_how_are_not_actual(
    cards=product_card_list
)

obj.save()

def compare_templates(self, template_old, template_new):
    attr_old_template_list = template_old.groups.filter(
        template=F('template')
    ).filter(
        options__isnull=False
    )
    attr_new_template_list = template_new.groups.filter(
        template=template_new.pk
    ).filter(
        options__isnull=False
    )

    attr_old_list = []
    for attr_old_template in attr_old_template_list:
        if not self.is_exists_attr_in_template(
            attr_template_list=attr_new_template_list,
            attr_name=attr_old_template.options.name
        ):
            attr_old_list.append(attr_old_template.options.pk)
    return attr_old_list

def is_exists_attr_in_template(self, attr_template_list, attr_name):
    return attr_template_list.filter(
        options__name=attr_name
    ).exists()

def create_report_about_attr_sync(self, product_card_list):
    message = []

    info = {}
    for product_card in product_card_list:
        info['Код товара: '] = product_card.code
        info['Ссылка на товар: '] = product_card.pk
        # info['product_name'] = product_card.product.name
        info['Список атрибутов по которым не прошла связка'] = \
            product_card.attributes.all().values_list('options__name')
        message.append(info)
    return message

def create_report(self, product_card_list):
    report_list = []
    for product_card in product_card_list:
        product_card_attr_without_bind_list = [
            attr.options.name for attr in product_card.attributes.all()
        ]
        product_card_attr_without_bind_str = ', '.join(
            product_card_attr_without_bind_list
        )
        message = u"""Код товара: 
        <a href='{product_card_link}'>{product_card_code}<a/>
        <br />
        Не связанные атрибуты: {product_card_attr_without_bind}
        <br />""".format(
            product_card_code=product_card.code,
            product_card_link=settings.BASE_URL + reverse(
                viewname='admin:cards_productcard_change',
                args=[product_card.pk]
            ),
            product_card_attr_without_bind= \
                product_card_attr_without_bind_str
        )
        report_list.append(message)
    return '<br />\n'.join(report_list)

    send_html_email(
        subject=u'Карточки товара с новыми шаблонами',
        message='',
        recipient_list=settings.SYSTEM_NOTIFICATION_EMAIL_GROUPS,
        html_message='<br />\n'.join(message_list)
    )

def mark_product_cards_how_are_not_actual(self, cards):
    return cards.update(
        is_actual=False,
        is_checked=False,
        is_ready=True
    )

-----------------------------------------------------------------------------

def save_model(self, request, obj, form, change):
    if form.changed_data:
        with transaction.atomic():
            # сравнение шаблонов
            template_old = Property.objects.get(pk=obj.pk).template
            attr_old_template_list = template_old.groups.filter(
                template=F('template')
            ).filter(
                options__isnull=False
            )
            attr_new_template_list = obj.template.groups.filter(
                template=obj.template.pk
            ).filter(
                options__isnull=False
            ).select_related('options')
            attr_old_list = []
            for attr_old_template in attr_old_template_list:
                if not attr_new_template_list.filter(
                    options__name=attr_old_template.options.name
                ).exists():
                    attr_old_list.append(attr_old_template.options.pk)

            # удаление ненужных атрибутов
            product_card_list = obj.kind.cards.all()
            Attribute.objects.filter(
                options__in=attr_old_list
            ).filter(
                card__pk__in=product_card_list.values_list('pk')
            ).delete()

            # пометка карточек, как не валидные
            product_card_list.update(
                is_actual=False,
                is_checked=False,
                is_ready=True
            )

            obj.save()

        # формирование сообщения для пользователя
        message_list = []
        for product_card in product_card_list:
            product_card_attr_without_bind_list = [
                attr.options.name for attr in product_card.attributes.all()
            ]
            product_card_attr_without_bind_str = ', '.join(
                product_card_attr_without_bind_list
            )
            # ссылки на шаблоны
            message = u"""Код товара:
            <a href='{product_card_link}'>{product_card_code}<a/>
            <br />
            Наименование товара: {product_card_name}
            <br />
            Смена шаблона с
            <a href="{template_old_link}">{template_old_name}</a> на
            <a href="{template_new_link}">{template_new_name}</a>
            <br />
            Не связанные атрибуты: {product_card_attr_without_bind}
            <br />""".format(
                product_card_code=product_card.code,
                product_card_name=product_card.name,
                # назван так для разрешения конф-та имен
                template_old_name=template_old,
                template_old_link=settings.BASE_URL + reverse(
                    viewname='admin:cards_template_change',
                    args=[template_old.pk]
                ),
                template_new_name=obj.template,
                template_new_link=settings.BASE_URL + reverse(
                    viewname='admin:cards_template_change',
                    args=[obj.template.pk]
                ),
                product_card_link=settings.BASE_URL + reverse(
                    viewname='admin:cards_productcard_change',
                    args=[product_card.pk]
                ),
                product_card_attr_without_bind=\
                product_card_attr_without_bind_str
            )
            message_list.append(message)

        send_html_email(
            subject=u'Карточки товара с новыми шаблонами',
            message='',
            recipient_list=settings.SYSTEM_NOTIFICATION_EMAIL_GROUPS,
            html_message='<br />\n'.join(message_list)
        )

-----------------------------------------------------------------------------------

def sync_attr(template_old, template_new, product_card_list):
    with transaction.atomic():
        # сравнение шаблонов
        attr_old_template_list = template_old.groups.filter(
            template=F('template')
        ).filter(
            options__isnull=False
        )
        attr_new_template_list = template_new.groups.filter(
            template=template_new.pk
        ).filter(
            options__isnull=False
        ).select_related('options')
        attr_old_list = []
        for attr_old_template in attr_old_template_list:
            if not attr_new_template_list.filter(
                    options__name=attr_old_template.options.name
            ).exists():
                attr_old_list.append(attr_old_template.options.pk)

        # удаление ненужных атрибутов
        Attribute.objects.filter(
            options__in=attr_old_list
        ).filter(
            card__pk__in=product_card_list.values_list('pk')
        ).delete()

        # пометка карточек, как не валидные
        product_card_list.update(
            is_actual=False,
            is_checked=False,
            is_ready=True
        )

    # формирование сообщения для пользователя
    message_list = []
    for product_card in product_card_list:
        product_card_attr_without_bind_list = [
            attr.options.name for attr in product_card.attributes.all()
        ]
        product_card_attr_without_bind_str = ', '.join(
            product_card_attr_without_bind_list
        )
        # ссылки на шаблоны
        message = u"""Код товара:
        <a href='{product_card_link}'>{product_card_code}<a/>
        <br />
        Наименование товара: {product_card_name}
        <br />
        Смена шаблона с
        <a href="{template_old_link}">{template_old_name}</a> на
        <a href="{template_new_link}">{template_new_name}</a>
        <br />
        Не связанные атрибуты: {product_card_attr_without_bind}
        <br />""".format(
            product_card_code=product_card.code,
            product_card_name=product_card.name,
            # назван так для разрешения конф-та имен
            template_old_name=template_old,
            template_old_link=settings.BASE_URL + reverse(
                viewname='admin:cards_template_change',
                args=[template_old.pk]
            ),
            template_new_name=template_new,
            template_new_link=settings.BASE_URL + reverse(
                viewname='admin:cards_template_change',
                args=[template_new.pk]
            ),
            product_card_link=settings.BASE_URL + reverse(
                viewname='admin:cards_productcard_change',
                args=[product_card.pk]
            ),
            product_card_attr_without_bind= \
                product_card_attr_without_bind_str
        )
        message_list.append(message)

    send_html_email(
        subject=u'Карточки товара с новыми шаблонами',
        message='',
        recipient_list=settings.SYSTEM_NOTIFICATION_EMAIL_GROUPS,
        html_message='<br />\n'.join(message_list)
    )

-------------------------------------------------------------------

if form.changed_data:
    # делаю так, потому что нет доступа к старому шаблону
    template_old = Property.objects.get(pk=obj.pk).template
    template_new = obj.template
    product_card_list = obj.kind.cards.all()
    attr_value_helper = AttrValueHelper()
    attr_value_helper.transfer_attr_values(
        template_old=template_old,
        template_new=template_new,
        product_card_list=product_card_list
    )
    obj.save()
    attr_value_helper.inform(
        template_old=template_old,
        template_new=template_new,
        product_card_list=product_card_list
    )

# -*- coding: utf-8 -*-
import settings
from cards import infoblock
from cards.models import InformationBlockAttr, Attribute
from django.core.urlresolvers import reverse
from django.db import transaction
from django.db.models import F
from primitive import send_html_email


def get_info_block_cls(block_type='ones'):
    return getattr(infoblock, '{0}InfoBlock'.format(block_type.capitalize()))


def get_info_block_attrs_list(info_block):
    """
    Передаем InformationBlockAttr в зависимости от требуемого типа инфоблока;
    Для выгодных строим инфоблок с нужными параметрами "на лету";
    """
    if info_block.type == 'offer':
        attribute = get_info_block_cls('offer').get_common_attr_object()
        info_block_attr = InformationBlockAttr()
        info_block_attr.attribute = attribute
        info_block_attr.label_on_site = attribute.name
        info_block_attr.in_sitemap = False
        return [info_block_attr]
    return list(info_block.attrs.all())


class AttrValueHelper:
    def transfer_attr_values(self, template_old, template_new, product_card_list):
        with transaction.atomic():
            attr_old_list = self.__compare_templates(
                template_old=template_old,
                template_new=template_new
            )
            self.__delete_attr_old_template(
                attr_old_list=attr_old_list,
                product_card_list=product_card_list
            )
            self.__mark_product_cards_how_are_not_actual(
                cards=product_card_list
            )

    def __compare_templates(self, template_old, template_new):
        attr_old_template_list = template_old.groups.filter(
            template=F('template'),
            options__isnull=False
        )
        attr_new_template_list = template_new.groups.filter(
            template=template_new.pk,
            options__isnull=False
        )

        attr_old_list = []
        for attr_old_template in attr_old_template_list:
            if not self.__is_exists_attr_in_template(
                attr_template_list=attr_new_template_list,
                attr_name=attr_old_template.options.name
            ):
                attr_old_list.append(attr_old_template.options.pk)
        return attr_old_list

    def __is_exists_attr_in_template(self, attr_template_list, attr_name):
        return attr_template_list.filter(
            options__name=attr_name
        ).exists()

    def __delete_attr_old_template(self, attr_old_list, product_card_list):
        Attribute.objects.filter(
            options__in=attr_old_list,
            card__pk__in=product_card_list.values_list('pk')
        ).delete()

    def __mark_product_cards_how_are_not_actual(self, cards):
        return cards.update(
            is_actual=False,
            is_checked=False,
            is_ready=True
        )

    def inform(self, template_old, template_new, product_card_list):
        report = self.__create_report(
            template_old=template_old,
            template_new=template_new,
            product_card_list=product_card_list
        )
        send_html_email(
            subject=u'Карточки товара с новыми шаблонами',
            message='',
            recipient_list=settings.SYSTEM_NOTIFICATION_EMAIL_GROUPS,
            html_message=report
        )

    def __create_report(self, template_old, template_new,  product_card_list):
        report = []
        for product_card in product_card_list:
            product_card_attr_without_bind_list = [
                attr.options.name for attr in product_card.attributes.all()
            ]
            product_card_attr_without_bind_str = ', '.join(
                product_card_attr_without_bind_list
            )
            # ссылки на шаблоны
            message = u"""Код товара:
            <a href='{product_card_link}'>{product_card_code}<a/>
            <br />
            Наименование товара: {product_card_name}
            <br />
            Смена шаблона с
            <a href="{template_old_link}">{template_old_name}</a> на
            <a href="{template_new_link}">{template_new_name}</a>
            <br />
            Не связанные атрибуты: {product_card_attr_without_bind}
            <br />""".format(
                product_card_code=product_card.code,
                product_card_name=product_card.name,
                # назван так для разрешения конф-та имен
                template_old_name=template_old,
                template_old_link=settings.BASE_URL + reverse(
                    viewname='admin:cards_template_change',
                    args=[template_old.pk]
                ),
                template_new_name=template_new,
                template_new_link=settings.BASE_URL + reverse(
                    viewname='admin:cards_template_change',
                    args=[template_new.pk]
                ),
                product_card_link=settings.BASE_URL + reverse(
                    viewname='admin:cards_productcard_change',
                    args=[product_card.pk]
                ),
                product_card_attr_without_bind=\
                product_card_attr_without_bind_str
            )
            report.append(message)
        return '<br />\n'.join(report)