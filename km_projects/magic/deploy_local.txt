Получение проекта

	Если настроен ssh, то git clone git@gitlab0.km-union.ru:python/magic.git

	Если не настроен ssh, то git clone http://gitlab0.km-union.ru/python/magic.git

Открываем проект в pycharm

Окружение и зависимости

	автоматическое создание

		chmod +x deploy_local.sh

		./deploy_local.sh

	ручное создание

		python create_bootstrap.py

		должен появиться bootstrap.py

		python bootstrap.py

		должно создасться виртуальное окружение magic-env

		должна появиться директория bin

		bin/pip install -r requirements.txt

		Переходим в имя_проекта/conf, открываем файл settings_local.py.template, копируем все

		В имя_проекта/conf созаем файл settings_local.py и вставляем все скопированное из settings_local.py.template

Привязка иртуального окружения к проекту через pycharm

	File -> Settings -> Project -> Project interpreter -> иконка шестеренка -> Show all -> знак плюс -> выбираем Existing environment -> /path/to/envs/name_env/bin/python

Устанавливаем нужные версии субд в docker контейнерах

	Должен быть установлен docker server

	postgresql

		Создаем директории на локальной машине от имени суперпользователя (sudo mkdir):

			~/work/docker/volumes/postgres_9.5/config

			~/work/docker/volumes/postgres_9.5/data

		sudo docker run \
		--name postgres_9.5 \
		-v ~/work/docker/volumes/postgres_9.5/config:/etc/postgresql \
		-v ~/work/docker/volumes/postgres_9.5/data:/var/lib/postgresql/data \
		-p 5432:5432 -e POSTGRES_PASSWORD=asdf1234 -d postgres:9.5

	mysql

		Создаем директории (mkdir):

			~/work/docker/volumes/mysql_5.7/config

			~/work/docker/volumes/mysql_5.7/data

		sudo docker run \
		--name mysql_5.7 \
		-v ~/work/docker/volumes/mysql_5.7/config:/etc/mysql/conf.d \
		-v ~/work/docker/volumes/mysql_5.7/data:/var/lib/mysql \
		-p 3306:3306 \
		-e MYSQL_ROOT_PASSWORD=asdf1234 \
		-d mysql:5.7

Создаем в контейнерах нужные бд

	postgresql (создаем через терминал контейнера)

		snr

		korallmicro	

	mysql (можно создать с помощью mysql workbench или с помощью терминала контейнера)

		magic - база проекта

		online_shop_info

		goods_office

Заполняем файл settings_local.py

Миграции

	Устанавливаем драйвер MySQLdb

		sudo apt-get update

		sudo apt-get install python-mysqldb

		sudo apt-get install libmysqlclient-dev

	В env

		pip install mysqlclient

	Переходим в /magic/modules/configurator/admin.py и комментируем код на строках (152 - 157 включительно), потому что этот код вызывает ошибку

	Находясь в корневой директории с проектом в консоль bin/manage migrate

	В /magic/modules/configurator/admin.py убираем комментарии со строк (152 - 157 включительно)

Дамп бд

	Mysql

		Лучше делать через mysql workbench

	Postgresql

		При заливки дампов lin-web-dp@korallmicro.pgsql и lin-web-dp@snr.pgsql будет ошибка pg_restore: [archiver (db)] could not execute query: ERROR:  role "korallmicro" does not exist

		Решение: создаем роль korallmicro и заливаем заново

		Удостовериться, что в базе magic (mysql) есть таблица django_site со значениями (1, example.com, example.com)

	На 11.02.2019 используются базы:

		default, 1c_8_raw, istore, korallmicro, sales_base_models, snr_new 

Rabbit

	Должен быть установлен rabbitmq.

	Удостовериться, что settings_local.py имеет:

		BROKER_URL = [
		    # Важно, чтобы на dev был localhost
		    "amqp://guest:guest@localhost:5672/magic"
		]

		BROKER_TARGET_URL = [
		    # Важно, чтобы на dev был localhost
		    "amqp://guest:guest@localhost:5672/broker"
		]

		guest:guest - это логин и пароль от rabbit

		/magic и /broker - это имена виртуальных хостов rabbit-а, которые должны быть созданы:

			через web морду идем в Admin -> Virtual Hosts -> Add virtual host

	Все существующие очереди можно посмотреть в settings.py -> CELERY_QUEUES

Run в pycharm

	Справа сверху находим зеленую стрелочку.

	Слева от нее нажимаем Add configuration или если какая то конфигурация уже существует, то Edit configuration.

	В открывшемся окне ищем и нажимаем знак плюс.

	Из выпадающего списка выбираем Python.

	В поле Script path вводим путь до выполняемого файла - bin/manage

	В поле Parameters вводим команду, которая должна сработать - runserver 0.0.0.0:8000

	В поле Python interpreter выбираем Project default (Python 2.7 (magic-env))

	В поле Working directory вводим путь к корневой директории с проектом - ./magic

Celery

	Справа сверху находим зеленую стрелочку.

	Слева от нее нажимаем Add configuration или если какая то конфигурация уже существует, то Edit configuration.

	В открывшемся окне ищем и нажимаем знак плюс.

	Из выпадающего списка выбираем Python.

	В поле Script path вводим путь до выполняемого файла - bin/celery

	В поле Parameters вводим команду, которая должна сработать - -A app_celery worker -l info -Q default,system,description,image_prepare --purge

	В поле Python interpreter выбираем Project default (Python 2.7 (magic-env))

	В поле Working directory вводим путь к корневой директории с проектом - /home/ilya/work/projects/magic

Нюансы

	Для раздачи статики используется свой cdn сервер.

	В качестве сервера используется nginx.


