Оглавление

	Установка языка

	Создание виртуального окружения

	Установка зависимостей

	Создание проекта

	Создание приложения

	Cтягивание существующего проекта

	Создание миграций

	Выполнение миграций

	Откат миграций

	Заливка дампа

	Запуск тестов

	Настройка проекта в pycharm

	Запуск проекта

	Команды git

	Команды linux

Установка языка

	sudo apt-get update

	sudo apt-get install -y python3-pip

	python3 -V

Работа с виртуальным окружением

	sudo pip install virtualenv - устанавливаем глобально

	virtualenv --version - показывает версию

	virtualenv name_venv - создает новое виртуальное окружение (в текущей директории)

	virtualenv --python=/usr/bin/python2.7 name_venv - создаёт виртуальное окружение, с указанной версией питона

	. name_venv/bin/activate - запуск виртуального окружения

	deactivate - выключает окружение

Установка зависимостей
		
	Переходим в корневую директорию проекта.

	В ней должен быть файл requrements.txt

	Если его нет, то pip freeze > requirements.txt

	Если есть, то pip install -r requirements.txt

Создание проекта

	pip install django

	django-admin startproject mysite

Создание приложения

	Переходим в директорию с файлом manage.py

	python manage.py startapp news

	Открываем settings.py

	Добавляем в INSTALLED_APPS имя созданного приложения, то есть 'news'

Cтягивание существующего проекта

	git clone link_on_project_from_gitlab

Создание миграций

	В каждом приложении есть файл models.py

	В этом файле мы описываем структуру данных приложения.

	После того, как мы описали структуру мы можем создавать миграции.

	./manage.py makemigrations name_app - создаёт миграции

	./manage.py makemigrations name_app --name name_migration - создает именнованную миграцию (удобно в случае если нужно откатить какую-либо миграцию)

	./manage.py showmigrations - выводит все существующие

Выполнение миграций

	./manage.py migrate

Откат миграций

	При откате теряются данные таблиц, которые откатываются.

	./manage.py migrate name_app zero

Заливка дампа

	postgersql

		sudo -i -u postgres

		Переходим в директорию с дампом.

		pg_restore -U postgres -d db_name -1 file_name.dump

	pgadmin

		На нужной бд нажимаем правой кнопкой.

		Выбираем restore.

		В открывшемся окне добавляем файл в поле filename (при добавлении тип файла задаем "all")

		Нажимаем "restore"

	mysql

		mysql -u root -p

		enter password: asdf1234

		Переходим в директорию с бэкапом.

		mysqldump -u root -p db_name < dbexport.sql

		enter password: asdf1234

	mysqlworkbench

		В категории managment выбираем data/import restore

		Выбираем import from self-container file.

		Добавляем туда файл с дампом (при добавлении тип файла задаем "all")

		Выставляем в поле default target schema нужную базу.

Запуск тестов

	./manage.py test

	Запуску тестов может мешать встроенный contenttypes фреймворк.

	Один из вариантов решения этой проблемы это найти в модели следующий кусок кода и закоментировать его.

		class Profile(models.Model):
		    user = models.ForeignKey(User, related_name='profile', verbose_name=u'Пользователь')
		    content_type = models.ForeignKey(ContentType)

Настройка проекта в pycharm

	Привязываем виртуальное окружение

		File -> Settings -> Project -> Project interpreter -> иконка шестеренка -> Show all -> знак плюс -> выбираем Existing environment -> /path/to/envs/name_env/bin/python

	Добавляем автозапуск проекта

		В правой части возле кнопки "старт" ищем select.

		Выбираем add cofiguration.

		В открывшемся окне разворачиваем нажимаем на плюс и выбираем python.

		В поле working directory задаем путь до файла manage.py

		В поле script path задаем ./manage.py

		В поле parameters задаем команду которая должна выполниться, runserver 0.0.0.0:8000

	Добавляем автозапуск celery (если надо)

		В правой части возле кнопки "старт" ищем select.

		Выбираем add cofiguration.

		В открывшемся окне разворачиваем нажимаем на плюс и выбираем python.

		В поле working directory задаем путь до корня проекта

		В поле script path задаем - celery

		В поле parameters задаем команду которая должна выполниться, -A app_celery worker -Q default,system,description,image_prepare --purge

	Добавляем автозапуск тестов

		В правой части возле кнопки "старт" ищем select.

		Выбираем add cofiguration.

		В открывшемся окне разворачиваем нажимаем на плюс и выбираем python.

		В поле working directory задаем путь до файла manage.py

		В поле script path задаем ./manage.py

		В поле parameters задаем команду которая должна выполниться, test

Запуск проекта

	python manage.py runserver

	./manage.py runserver

	./manage.py runserver 0.0.0.0:8000

Команды git

	git clone project_link

	git status

	git add .

	git add path/to/file.py path/to/file.py

	git log

	git commit

	git commit -m

	git push

	git push --set-upstream origin branch_name

	git pull

	git checkout -b branch_name

	git branch -d branch_name

	git branch -D branch_name

	git merge branch_name (делаем на той ветки в которую хотим залить, а имя должно быть той ветки, которую вливаем)

	git branch -r

	git stash

	git stash apply

	git commit --amend (позволяет изменить сообщение коммита, но если запушил, то не использовать)

	git reset --soft HEAD^ (удаляет последний коммит, но оставляет все изменения)