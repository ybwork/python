Оглавление

	1. Локальное развертывание

		1.1. Создание проекта

		1.2. Структура проекта от Two scoops of Django

		1.3. Настройка проекта -

			Описать, как только настрою всё

		1.4. Приложения проекта от Two scoops of Django

	2. Последовательность действий

	3. Основные инструменты

		3.1. Модели -

		3.2. Миграции -

		3.3. Представления -

		3.4. Шаблоны -

		3.5. Url-ы -

		3.6. Тесты -

		3.7. Формы -

		...

1. Основные инструменты
	
	1.1. Создание проекта

		Команды для создания виртуального окружения

			whereis python

			virtualenv --python=/usr/bin/python3.7 name_venv

			. name_venv/bin/activate

			deactivate

		Команды для создания проекта

			pip install django==1.9

			django-admin startproject name_project

	1.2. Структура проекта от Two scoops of Django

		project_name/
			config/

				settings/
					__init__.py
					local.py
					production.py
					...

				__init__.py
				urls.py
				wsgi.py

			docs/

			project_name/
				media/
				name_app/
				name_app/
				static/
				templates/

			.gitignore
			README.rst
			manage.py
			requirements.txt
			package.json

		Для корректной работы меняем:

			local.py

				ROOT_URLCONF = 'config.urls'

				WSGI_APPLICATION = 'config.wsgi.application'

		Запуск и встроенные команды

			Теперь к каждой команде добавляем файл с настоойками.

				./manage.py runserver --settings=config.settings.local

		Bootstrap и другие js/css либы

			Ставим через npm и package.json

			В итоге в корне проекта появляется директория node_modules

			При деплое руками переносим нужные файлы в директорию static, потому что команда ./manage collectstatic расчитана только на приложения django, а bootstrapp, jquery и т.д. относятся ко всему проекту, а не к конкретному приложению.

		Установка через npm

			В корне проекта создаем package.json

				У него четкой правил по структуре, поэтому можно не добавлять много.

				{
				  "name": "project_name",
				  "version": "1.0.0",
				  "private": true,
				  "dependencies": {
				    "bootstrap": "",
				    "jquery": "",
				    "popper.js": ""
				  }
				}

			В терминале выполняем команду npm i

			Для просмотра установленных пакетов в терминале выполняем npm ls

		Подключение общей статики в шаблонах

			Добавляет путь к общей статике в STATICFILES_DIRS

				STATICFILES_DIRS = [
				    os.path.join(PROJECT_ROOT, 'node_modules')
				]

	1.3. Настройка проекта

		...

	1.4. Приложения проекта от Two scoops of Django

		Приложения должны делать только одну вещь и делать её хорошо.

		Приложения могут быть взаимосвязанны между собой.

		Название приложений могут быть, как в единственном, так и во множественном числе. Это завист от того, что делает приложение, например blog и shop будут в единственном числе, потому что на сайте один блог и один магазин, а например events и tickets будут во множественном, потому что отвечают за работу со множеством событий и билетов.

2. Последовательность действий

	Создали приложение.

	Добавили приложение в installed_apps.

	На основе структуры бд создали модель.

	Создали миграцию.

	Выполнили миграцию.

	Создали представление.

	Привязали к представлению url.

	Написали тест на функцию, которая будет в представлении (если будет и если нужно её тестировать).

	Выполнили тест (он не прошел, потому что функция ещё не написана).

	Реализовали представление.

	Ещё раз выполнили тот же тест (он прошел).

3. Основные инструменты

	3.1. Модели

		(!) Здесь нужно описать связь один-к-одному, один-ко-многим, многие-ко-многим, прокси модели, менеджеры модели, кверисэты модели.

		В сообществе принято называть таблицы и модели в единственном числе.

		На основе модели в бд создается таблица в формате appname_modelname (cards_product).

		Обычная модель

			class Something(models.Model):

				id = models.AutoField(primary_key=True)

					Django добавляет такое поле по умолчанию к каждой модели (можно изменить)

				sites = models.ForeignKey(Site, verbose_name='list of sites')

					В полях типа ForeignKey, ManyToManyField и OneToOneField с помощью первого аргумента 'list of sites' можно указать читабельное название поля.

				dealer = models.ForeignKey(Dealer, related_name='cars')

					Имя для обратной связи, например если мы захотим обратиться от другой модели, то это можно сделать так Dealer.objects.first().cars

				dealer = models.ForeignKey('Dealer', on_delete=models.CASCADE)

					'Dealer' позволяет создать связь с моделью, которая еще не определена для обращения к модели из другого приложения пишем так 'name_app.Manufacturer'

				name = models.CharField('User name')

					C помощью первого аргумента 'user name' можно указать читабельное название поля

				surname = models.CharField(null=True)

					Если null=True, то сохранит в бд пустое значение из формы, как NULL

				phone = models.CharField(blank=True)

					Если blank=True, форма позволит передать пустое значение на сервер

			    SHIRT_SIZES = (
			        ('S', 'Small'),
			        ('M', 'Medium'),
			        ('L', 'Large'),
			    )
			    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)

			    	Виджет формы использует select и ограничит значение поля указанными значениями в SHIRT_SIZES

			    amount = models.IntegerField(default=0)

			    	Значение из default будет попадать в бд по умолчанию

			    code = models.IntegerField(primary_key=True)

			    	Поле будет первичным ключом и по умолчанию не добавится поле id 

			    email = models.CharField(unique=True)

			    	Значение в поле должно быть уникальным

				class Meta:

			        ordering = ['end_date'/'-end_date']

			        	Сортировка asc/desc

			        db_table = 'music_album'

			        	Название таблицы для этой модели

			        managed = False

			        	При миграция таблицы для этой модели не будет создаваться или удаляться это полезно, если модель отображает существующую таблицу, которая была создана другим способом

			        # остальные настройки можно посмотреть здесь

				        https://djbook.ru/rel1.9/ref/models/options.html

				        https://docs.djangoproject.com/en/2.2/ref/models/options

		Одни к одному

			class People(models.Model):
				name = models.CharField(max_length=255)

			class Pasport(models.Model):
				people = models.OneToOneField(People, on_delete=models.CASCADE)
				code = models.IntegerField()

			На основе этих моделей создадутся 2 таблицы в бд - appname_people, appname_pasport.

			В таблице appname_pasport будет связь один к одному - people_id.

		Один ко многим

			class Dealer(models.Model):
				name = models.CharField(max_length=255)

			class Car(models.Model):
				dealer = models.ForeignKey(Dealer, on_delete=models.CASCADE)