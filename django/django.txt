Оглавление

	Философия дизайна

	Настройки

	Основные настройки

	Развертывание (nginx + gunicorn + django + postgresql)

	Как Django обрабатывает запрос

Философия дизайна

	Фундаментальная основа стека Django - это слабая связанность.

		Отдельным слоям фреймворка не следует “знать” друг о друге, если в этом нет острой необходимости.

		Например, система шаблонов ничего не знает о Web запросах, а базу данных не интересует, как эти данные представлены.

		Django поставляется с пакетом приложений, который представляет из себя кусочки, для удобства независимые настолько, насколько это возможно.

	Меньше кода

		Приложения Django должны использовать настолько мало кода, насколько возможно, следует избегать шаблонных кусков.

	Не повторяйтесь (DRY)

		Каждая отдельная концепция и/или кусок данных следует хранить в одном и лишь одном месте. Избыточность - плохо. Нормализация - хорошо.

	Явное лучше чем неявное

		Это значит, что Django не должен творить слишком много магии.

	Эффективность SQL

		SQL запросы должны выполняться как можно реже, и должны быть оптимизированы.

	Всё должно быть на своих местах

		Например вся информация, описывающая модель и логику ее работы  определена в классе модели.

Настройки

	Файл настроек содержит полную конфигурацию установленного проекта и называется settings.py

	Файл настроек - это просто модуль python с переменными модуля.

	Можно динамически определять настройки, используя обычный синтаксис python.

		settings.MY_SETTING.append['new_param']

	Можно импортировать значения из других файлов настроек.

		from settings_local import *

	Можно явно указать какие настройки должны использоваться.

		export DJANGO_SETTINGS_MODULE=mysite.settings
		django-admin runserver

		----

		django-admin runserver --settings=mysite.settings

	Для настройки на сервере (Apache и mod_wsgi) нужно указать WSGI-приложению какой файл с настройками использовать.

		import os
		os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

	Проект Django не обязан определять какие-либо настройки, если в этом нет необходимости.

		Каждая настройка содержит значение по умолчанию.

		Эти значния можно найти в модуле django/conf/global_settings.py

		Можно сделать так, чтобы настройки загружались по умолчанию не из модуля django/conf/global_settings.py

	Импорт настроек

		Правильно импортировать так:

			from django.conf import settings

	Вам не следует менять настройки в процессе работы приложения.

	Безопасность

		Файл настроек содержит конфиденциальную информацию, например, как пароль к базе данных, вы должны хранить его в безопасности. 

		Например, поменяйте права доступа к файлу, чтобы только вы и пользователь веб-сервера имел к нему доступ. 

		Это особенно важно для хостингов с общим окружением.

	Добавление собственных настроек

		Названия настроек должны быть в верхнем регистре.

		Не изобретайте заново существующие настройки.

Основные настройки

	Список основных настроек можно посмотреть здесь:

		https://djbook.ru/rel1.9/ref/settings.html#core-settings-topical-index

		https://docs.djangoproject.com/en/2.2/ref/settings/#core-settings-topical-index

	BASE_DIR

		Здесь путь корневой директории с проектом. 

	SECRET_KEY 

		Исользуется для различных механизмов защиты django приложений.

		Используется для криптографической подписи, если не указан другой ключ.

		Используется для всех сессий, кроме django.contrib.sessions.backends.cache.

		Без него проект не запуститься.

		Генерится автоматов при создании проекта.

		Не используется для хранения пароля пользователей и при смене они не будут сломаны.

	DEBUG

		Включает/выключает режим отладки.

		Не использовать True на боевом сервере.

		При DEBUG равном False, необходимо правильно указать ALLOWED_HOSTS, а иначе все запросы будут возвращать Bad Request (400).

	ALLOWED_HOSTS

		Список хостов/доменов, для которых может работать текущий сайт.

		Это сделано для безопасности, чтобы обезопасить от внедрения в куки или письма для сброса пароля ссылок на сторонний сайт подменив HTTP заголовок Host.

		Проверка обычно нужна только на боевом сервере.

	INSTALLED_APPS

		Здесь список всех приложений Django, используемых в проекте.

		Названия приложения должны быть уникальны.

		Если несколько приложений содержат разные версии одних и тех же ресурсов (шаблоны, статические файлы, команды, файлы перевода), будут использоваться ресурсы из приложения, которое указано выше.

	MIDDLEWARE

		Здесь список всех промежуточных слоев проекта.

	ROOT_URLCONF

		Путь для импорта главной конфигурации URL-ов.

	WSGI_APPLICATION

		Полный путь к объекту WSGI приложения, которое будет использовать встроенный сервер Django.

		Команда django-admin startproject создаст простой wsgi.py файл с функцией application, и установит значение этой настройки на этот объект application.

	DATABASES

		Здесь настройки подключения к бд.

	    'default': {
	        'ENGINE': 'django.db.backends.postgresql',
	        'NAME': 'magic',
	        'USER': 'root',
	        'PASSWORD': 'asdf1234',
	        'HOST': '127.0.0.1',
	        'PORT': '5432',
	    },

	AUTH_PASSWORD_VALIDATORS

		Здесь список валидаторов, которые проверяют надежность пароля пользователя.

	LANGUAGE_CODE

		Здесь установка языка, который используется в проекте.

	TIME_ZONE

		Засовой пояс, который будет использоваться в проекте

	USE_I18N

		Указывает, используется ли механизм перевода Django.

		Если выключен, то повышает производительность.

	USE_L10N

		Указывает, использовать ли локализованный формат даты.

	USE_TZ

		Указывает, используется ли часовой пояс.

	CACHES

		Настройки механизма кэширования.

	DATABASE_ROUTERS

		Здесь список маршрутизаторов, которые будут использоваться для определения какую базу данных использовать при выполнении запроса.

	ADMINS

		Здесь список людей, которые будут получать уведомления об ошибках.

	EMAIL_BACKEND

		Бэкенд, используемый для отправки электронных писем.

	STATIC_ROOT

		Здесь путь к каталогу, из которого будут раздаваться статические файлы.

		Выполнив команду python manage.py collectstatic, все статические файлы проекта будут скопированы в указанную директорию.

		STATIC_ROOT и MEDIA_ROOT должны отличаться.

	STATIC_URL

		URL, указывающий на каталог со статическими файлами.

		Если не пустой, то должен оканчиваться косой чертой.

		Например '/static/'

			Будет работать, как http://exmaple.com/static/

	STATICFILES_DIRS

		Здесь общие статические файлы, которые не относятся ни к одному из приложений.

	MEDIA_ROOT

		Абсолютный путь к каталогу, в котором хранятся медиа-файлы.

		MEDIA_ROOT и STATIC_ROOT должны отличаться.

	MEDIA_URL

		URL который указывает на каталог MEDIA_ROOT.

		Например '/media/'

			Будет работать, как http://exmaple.com/media/

		Если вы хотите использовать {{ MEDIA_URL }} в шаблонах, добавьте 'django.template.context_processors.media' в опцию 'context_processors' настройки TEMPLATES.

	LOGGING

		Здесь настройки логгирования.

	APPEND_SLASH

		Настройка APPEND_SLASH используется только вместе с CommonMiddleware.

		Если урл не найден и в конце нет слэша, то будет добавлен и сделано перенаправление.

		Заметим что такое перенаправление может привести к потере всех данных при POST запросе.

Развертывание



	