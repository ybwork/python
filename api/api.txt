Оглавление

	Общее

	Two scoops of Django

Общее

	save points

	удостовериться, что запрос доставлен

	если не доставлен, то отправили ещё раз

	лучше на бэкенде собирать данные и отдавать на клиент

	лучше нагружать базу при сборке данных (например нужно взять авторов и их книги)

	иноrда лучше собрать данные с помощью питона (например когда данные в разных базах и нужно много запросах), для этого можно использовать prefetch_related django

	нужна версионность и компани объекты

	можно использовать стратегию или адаптер для того, чтобы например отдавать данные в одном формате для react и в другом формате для ios/android

Two scoops of Django

	Основы REST API Design

		Для каждого действия используется свой метод HTTP.

			Create a new resource - POST - INSERT

			Read an existing resource - GET - SELECT

			Update an existing resource - PUT - UPDATE

			Update part of an existing resource - PATCH - UPDATE

			Delete an existing resource - DELETE - DELETE

			Returns same HTTP headers as GET, but no body content - HEAD

			Return the supported HTTP methods for the given URL - OPTIONS

			Echo back the request - TRACE

		Использовать только GET и POST это плохой подход.

		Метод PATCH часто не реализуется. Это нормально если реализован метод PUT.

		В ответ на запрос api возвращает код состояния. Вот список самых основных:

			200 OK - Success - GET, PUT

			201 Created - Success - POST

			204 No Content - Success - PUT, DELETE

			304 Not Modified - Redirect - ALL

			400 Bad Request - Failure - ALL

			401 Unauthorized - Failure - ALL

			403 Forbidden - Failure - ALL

			404 Not Found - Failure - ALL

			405 Method Not Allowed - Failure - ALL

			410 Gone (удален) - Failure - ALL

			429 Too Many Requests (слишком много запросов) - Failure - ALL

	Структура проекта с REST API

		Url-ы должны оставаться в urls.py

		API это просто представления.

		Если проект небольшой, то мы храним их в файлах views.py или viewsets.py

			flavors/
			├── api/
			│ ├── __init__.py
			│ ├── authentication.py
			│ ├── parsers.py
			│ ├── permissions.py
			│ ├── renderers.py
			│ ├── serializers.py
			│ ├── validators.py
			│ ├── views.py
			│ ├── viewsets.py

		Если проект большой, то API можно вынести в директории views или viewsets и положить каждую часть в отдельный файл.

			flavors/
				api/
					__init__.py
					authentication.py
					parsers.py
					...
					views/
						__init__.py
						flavor.py
						ingredient.py

			Но это не самый лучший подход, потому что приложений может быть много и файлов внутри каждого views тоже. И через время это будет сложно поддерживать, потому что логика будет размазана.

		Независимо от того, какая структура будет выбрана стоит помнить и постараться вынести бизнес-логику из файлов views.py или viewsets.py

		Создавать для каждой версии api отдельное приложение это плохой подход, потому что много кода будет дублироваться.

		Стоп на 230