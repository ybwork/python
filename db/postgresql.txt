Оглавление

	Что это

	Установка

	Нормальные формы, нормализация, консистентность данных (см. файл normal_form.txt)

	Основы архитектуры

	Создание базы данных

	Запросы

	Профилирование, EXPLAIN, оптимизация запросов.

	Индексы

	Транзакции

	Проблемы паралельных транзакций

	Уровни изоляции

	Блокировка

	Оптимизация

	Удаление базы данных

	DQL

	DML

	DDL

	Кластер

	Аутентификация клиентского приложения (порты)

	Логирование

	VACUUM

	Развёртывание

	Репликация (один из лучших вариантов master slawe)

	Команды

Что это

	PostgreSQL — это объектно-реляционная система управления базами данных

	Реляционная система управления базами данных - это система, которая позволяет хранить данные в структурированном и целостном виде.

Установка и настройка

	sudo apt-get update

	sudo apt-get install postgresql postgresql-contrib

	sudo -u postgres psql

	\password

Основы архитектуры

	PostgreSQL реализован в архитектуре клиент-сервер.

	Postgres - главный серверный процесс, который управляет файлами бд, подключениями клиентских приложений и запросами клиентов к бд.

	Клиентским приложением может быть консоль, веб сервер, графическое приложение и т.д.

	Клиент и сервер могут располагаться на разных компьютерах. В этом случае они взаимодействуют по сети TCP/IP.

	Сервер PostgreSQL может обслуживать одновременно несколько подключений клиентов. Для этого он запускает отдельный процесс для каждого подключения. При этом клиент и серверный процесс не затрагивает postgres.

Создание базы данных

	Первое, как можно проверить, есть ли у вас доступ к серверу баз данных, — это попытаться создать базу данных. 

	createdb mydb

	Создавать базы данных разрешено не всем пользователям. Если PostgreSQL отказывается создавать базы данных для вас, значит вам необходимо соответствующее разрешение.

Запросы

	Не забывать при запросе писать к какой базе обращаемся.

Профилирование, EXPLAIN, оптимизация запросов.

	

Индексы

	
	
Транзакции

	Это операция состоящая из определённого набора действий, которые либо выполняется полностью, либо не выполняются вообще.

	Автокоммит работает автоматически по завершению запроса.

	Если мы явно начинаем транзакцию с помощью begin, то автокоммит выключается и его нужно сделать яано.

	Пока первая транзакция не снимет блок, вторая будет в режиме ожидания.

	Когда транзакция с явным уровнем изоляции завершена, то уровень изоляции возвращается в режим по умолчанию.

	У каждой транзакции есть точка сохранения (save point).

Проблемы паралельных транзакций

	Потерянное обновление

		Обе транзации делают обновление. 

		Первая читает текущее значение поля, которое нужно обновить. 

		Вторая читает это же значение поля до завершения первой. 

		Получается обе при чтении получают одинаковое значение.

		В итоге первая транзакция завершается и записывает новое значение, а вторая при своём завершении перезаписывает значение первой.

	Грязное чтение

		Первая изменила данные, пошла дальше. 

		Вторая увидела изменения первой. Первая не доработала и откатилась. 

		Вторая продолжила работать с неактуальными данными и завершилась.

	Неповторяющееся чтение

		В первой транзакции происходит две одинаковые операции выбора значения поля.

		После первой операции выбора (первой транзакцией), вторая транзакция изменяет значение выбираемого поля.

		При второй операции выбора первой транзакцией мы получаем совсем другое значение поля.

	Чтение фантомов

		В первой транзакции происходит две одинаковые операции выбора значения поля.

		После первой операции выбора (первой транзакцией), вторая транзакция добавляет новую запись в таблицу.

		При второй операции выбора первой транзакцией мы получаем совсем другое значение поля.

		Отличие чтения фантомов от неповторяющегося чтения в том, что при фантомном создаётся новая запись, а при неповторяющемся запись удаляется или изменяется.

Уровни изоляции

	Уровни изоляции - это механизм субд, который позволяет избавиться от проблем паралельных транзакций.

	В процессе рассуждения помнить о блокировках.

	Read committed

		Позволяет читать другим транзакциям только закомиченные данные.

		В postgresql выбран по умолчанию.

		Решает проблему грязного чтения.

		В процессе работы одной транзакции другая может быть успешно завершена и сделанные ею изменения зафиксированы.

	Read uncommited

		Позволяет читать другим транзакциям незакомиченные данные.

		Решает проблему потерянного обновления, потому что после изменения данных первой транзакцией, вторая транзакция может получить новые данные до их фиксации.

		В процессе работы одной транзакции другая может быть успешно завершена и сделанные ею изменения зафиксированы.

	Repeatable read

		Повторяемое чтение.

		Позволяет получить доступ только к закоммиченным данным.

		Решает проблему неповторяющегося чтения. Как?

	Serializable

		Каждая транзакция срабатывает последовательно и не имеет доступа к данным, которые изменяются в другой.

		При изоляции такого уровня все транзакции обрабатываются так, как будто они все запущены последовательно.

Блокировки.

	Блокировка (lock) - механизм, который позволяет транзакции захватить доступ к объекту бд.

	Бывают явные (если указали сами в рамках транзакции) и неявные (postgres накладывает автоматические)

	Если обращаемся к разным строкам таблицы, то каждая противоположная транзакция получит доступ к противоположной строке и блокировки не будет.

	SELECT FOR UPDATE берёт строки и блокирует их на обновление. При этом накладываются 2 блокировки (shared, exclusive)

	Типы:

		Исключительная (exclusive lock) - накладывается если транзакция изменяет данные и запрещает другим транзакциям блокировать этот же объект
 
		Совместная (shared lock) - накладывается если транзакция только читает данные и разрещает другим транзакциям блокировть этот же объект

	Виды:

		На уровне строки 

			Действует только на одну строку таблицы, не ограничивая манипуляции над другими строками  

		На уровне таблицы

	Две транзакции не могут одновременно владеть блокировками конфликтующих режимов для одной и той же таблицы.

	Одна транзакция никогда не кофликтует с собой и может сначала запросить блокировку exclusive, а share для той же таблицы.

Оптимизация

	Выносить сервер базы данных на отдельную машину, где будет только база данных.

	Сначала обновляться до новой версии и смотреть на производительность.

	Пользуемся утилитой pg_tune, которая собирает файл конфига для postgres под конкретную машину.

Удаление базы данных

	dropdb mydb

DQL

	Data Query Language - язык запросов, составная часть SQL. Состоит из единственной команды SELECT.

	Команда SELECT позволяет получить данные из бд.

	С командой SELECT можно использовать следующие команды:

	FROM - из какой таблице берём данные

	WHERE - условие по которому выбираются данные

	JOIN - присоединение таблиц

	ON - условие для JOIN

	USING - условие JOIN если имена полей разных таблиц одинаковы (USING (a, b) формирует условие ON T1.a = T2.a AND T1.b = T2.b)

	GROUP BY - группирует строки таблицы, объединяя их в одну группу при совпадении значений (например в таблице есть product_id и их значения совпадают)

	HAVING - позволяет задать условие после группировки и оставить только нужные группы строк

	ORDER BY - позволяет задать порядок выбора данных (по убыванию DESC или по возрастанию ASC)

	UNION - обьединяет вывод двух или более SQL запросов в единый набор строк и столбцов. Все запросы выполняются независимо друг от друга, а уже вывод их — обьединяется. Столбцы вывода должны быть совместимы для объединения.

	Subqueries - позволяют сделать один запрос внутри другого.

DML

	Data Manipulation Language - язык запросов для манипулирования данными, составная часть SQL. 

	Включает в себя такие команды, как: 

	INSERT - добавляет данные в таблицу 

	UPDATE - обновляет данные в таблице 

	DELETE - удаляет данные из таблицы

DDL

	Data Definition Language - язык описания данных.

	У базы данных есть таблицы.

	У таблиц есть столбцы.

	Каждый имеет свой тип данных.

	Для каждого типа данных можно задать свою длинну.

	В каждой таблице есть записи, они же строки.

	Уникальность каждой строки гарантирует первичный ключ, который имеет уникальное, не повторяющееся значение

	Целостность данных гарантируют внешние ключи, которые связывают одну таблицу с другой.

	С помощью DDL можно описать, создать и модифицировать структуру БД.

Кластер

	Это набор баз данных, которые управляются одним экземпляром сервера.

	С точки зрения файловой системы, кластер баз данных представляет собой один каталог, в котором будут храниться все данные.

	Находится в etc/postgresql/10/main

Аутентификация клиентского приложения

	Клиентское приложение - это наша программа, которая подключается к серверу баз данных.

	Аутентификация управляется конфигурационным файлом pg_hba.conf (host-based authentication)

	Файл pg_hba.conf расположен в каталоге с данными кластера.

	В файле pg_hba.conf прописываются настройки аутентификации.

	local база  пользователь  метод-аутентификации  [параметры-аутентификации]

	host база пользователь IP-адрес IP-маска метод-аутентификации [параметры-аутентификации]

	Позволяет любому пользователю локальной системы подключаться ко всем базам данных
	TYPE  DATABASE  USER  ADDRESS  METHOD
	local all       all            rust

	Позволяет любому пользователю компьютера 192.168.12.10 подключаться к базе данных postgres, если он передаёт правильный пароль.
	TYPE  DATABASE  USER  ADDRESS           METHOD
	host  postgres  all   192.168.12.10/32  scram-sha-256

Логирование

	Позволяет делать мониторинг состояния сервера бд.

	Здесь и возможность мониторить выполнение отдельно взятых запросов и общей нагрузки на бд и отслеживание ошибок.

	PostgreSQL поддерживает несколько методов протоколирования сообщений сервера: stderr, csvlog и syslog.

	По умолчанию используется stderr.

	В качестве значения log_destination указывается один или несколько методов протоколирования, разделённых запятыми.

	Если в log_destination включено значение csvlog, то протоколирование ведётся в формате CSV.

	Slow log - мониторинг медленных запросов.

	Настройка log_min_duration_statement задается в миллисекундах, и логирует все запросы к базе, которые исполнялись дольше заданного значения. Данную настройку можно установить в файле конфигурации postgresql.conf

VACUUM

	VACUUM высвобождает пространство, занимаемое «мёртвыми» кортежами. 

	При обычных операциях PostgreSQL кортежи, удалённые или устаревшие в результате обновления, физически не удаляются из таблицы. Они сохраняются в ней, пока не будет выполнена команда VACUUM. 

	Таким образом, периодически необходимо выполнять VACUUM, особенно для часто изменяемых таблиц.

Развёртывание

	Обратить внимание на локаль. Если на машине не стоит нужной локали и мы установили postgres, где она есть, то может возникнуть конфликт.

	Поэтому сначала уставливаем локаль на машину, а потом postgres.

Команды

	\dt - показывает список таблиц внутри базы

	createdb mydb - создаёт бд











	

		