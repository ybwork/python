Оглавление

	Что это

	Как это работает

	Главный конфигурационный файл

	Глобальная секция

	Секция http

	Секция server

	Как nginx обрабатывает запросы

	Docker

	Команды

Что это

	Это web сервер.

	Web сервер — это компьютерная программа, запускаемая на подключённом к сети компьютере и использующая протокол HTTP для передачи данных. 

	В простейшем виде такая программа получает по сети HTTP-запрос на определённый ресурс, находит соответствующий файл на локальном жёстком диске и отправляет его по сети запросившему компьютеру. Более сложные веб-серверы способны в ответ на HTTP-запрос динамически генерировать документы с помощью шаблонов и сценариев.

	Для загрузки и просмотра веб-страниц используются специальные программы — браузеры. Браузер это клиент.

Как это работает

	Клиент делает запрос к серверу. (клиентом может быть как браузер, так и например wget)

	Начинается поиск dns.

	В настройках каждой системы указано местоположение dns. 

	В linux это файл hosts в директории etc. (когда изменили файл, сеть не перезапускать)

	Если dns найден в файле hosts, то запрос идёт дальше к серверу.

	Если сервер получил запрос, то это будет видно в логах.

	Логи находятся /var/log/nginx

	Если запрос добрался до nginx, то это запишется в файл access.log

	Дальше управление берёт на себя web сервер.

	Если web сервер настроен на использование статического контента, то в ответ на запрос отпрвляется файл.

	Если web сервер настроен на использование динамического контента, то запрос отпрвляется в application сервер.

	Как узнать, что запрос дошёл до application сервера?

Главный конфигурационный файл

	По умолчанию, конфигурационный файл называется nginx.conf и расположен в каталоге /usr/local/nginx/conf, /etc/nginx/conf.d/default.conf или /usr/local/etc/nginx

	Конфигурационный файл NGINX состоит из секций.

Глобальная секция

	В глобальной секции задаются параметры, оказывающие влияние на сервер в целом. 

	Глобальная секция не заключается в фигурные скобки. 

	Обычно пишется в файле nginx.conf

		user  nginx; - пользователь и группа, от имени которых исполняются рабочие процессы (нужно содать пользователя с этим именем в системе)
		worker_processes  1; - кол-во рабочих процессов

		error_log  /var/log/nginx/error.log warn; - файл куда логгируются ошибки
		pid        /var/run/nginx.pid; - файл в котором храниться id главного процесса


	Глобальная секция должна находиться в начале конфигурационного файла nginx.conf

	В главный файл конфигурации можно подключать файлы. Если указан не полный путь, то NGINX считает, что путь задан относительно главного местоположения конфигурационного файла.

		include /etc/nginx/conf.d/*.conf;

Секция http

	Секция http описывает http сервер. Сюда входят настройки соединения с клиентом, работа со статикой, сокетами, виртуальными серверами и т.д.

Секция server

	Секция server описывает виртуальный сервер. По умолчанию секция server находиться в отдельном файле, который подключается в секцию http. Этот файл называется default.conf. Его можно найти в etc/nginx/conf.d/default.conf.

		server {
			listen 80; - порт (если оставить 80, то в браузере будет работать без указания порта)
    		server_name localhost; - ip адрес

		    location / {
		        root   /usr/share/nginx/html; - директория с файлом
		        index  index.html index.htm; - тип и имя файла
		    }
		}

	В секции server описываются виртуальные сервера.

	Виртуальные сервера отвечают на запросы по протоколу HTTP.

	Описание виртуальных серверов обычно выносят в /etc/nginx/sites-available и /etc/nginx/sites-enabled

	В sites-available лежат конфиги всех виртуальных серверов.

	В sites-enabled лежат конфиги активных виртуальных серверов.	 

	Файл с описанием виртуального сервера подключается внутри секции http.

	Файл с описанием виртуального сервера выглядит так:

		server {
			listen 80; (может быть и так listen 127.32.4.1:8085;)
			server_name www.example.com;

			location / {
				try_files $uri $uri/ @mongrel;
			}

			location @mongrel {
				proxy_pass http://127.0.0.1:8080;
			}
		}

	Директива listen задает комбинацию IP-адреса и номера порта либо путь к сокету в домене UNIX.

	В директиве server_name возможно использование метасимвола *

	Метасимвол * можно указывать вместо поддомена: *.example.com

	Метасимвол * можно указывать вместо домена верхнего уровня www.example.*

	Метасимволы в пути позволяют включить сразу несколько файлов.

	В директиве server_name может быть и регулярное выражение.

	Чтобы определить, какой виртуальный сервер должен обслужить данный запрос, NGINX применяется следующий алгоритм:

		Сопоставить IP-адрес и порт с указанными в директиве listen

		Сопоставить заголовок Host со значением директивы server_name, рассматриваемым как строка

Имена сервера (dns)

	Имена сервера задаются с помощью директивы server_name и определяют, в каком блоке server.

	Имена могут быть заданы точно, с помощью маски или регулярного выражения.

	Поиск в хэш-таблице имён с масками медленнее, чем поиск в хэш-таблице точных имён, поскольку имена сравниваются по доменным частям. 

	Заметьте, что специальное имя с маской вида “.example.org” хранится в хэш-таблице имён с масками, а не в хэш-таблице точных имён.

	Регулярные выражения проверяются последовательно, а значит являются самым медленным и плохо масштабируемым методом.

	По вышеизложенным причинам предпочтительнее использовать точные имена, где это только возможно.

	Например, если к серверу наиболее часто обращаются по именам example.org и www.example.org, то эффективнее будет указать их явно.



Как nginx обрабатывает запросы

	Сначала nginx решает, какой из серверов должен обработать запрос.

	Если каждый сервер слушает один и тот же порт, то nginx проверяет только поле Host.

	Если его значение не соответствует ни одному из имён серверов или в заголовке запроса нет этого поля вовсе, nginx направит запрос в сервер по умолчанию для этого порта.

	Сервер по умолчанию можно задать явно с помощью параметра default_server (listen 80 default_server;)

	Следует иметь в виду, что сервер по умолчанию является свойством слушающего порта, а не имени сервера.

	Запросы без поля Host в заголовке не должны обрабатываться. Для этого нужно определить сервер, который будет их отклонять:

		server {
		    listen      80;
		    server_name "";
		    return      444; - немедленно закрывает соединение
		}

Docker

	docker run -p 80:80 --name nginx -v ~/nginx:/usr/share/nginx/html -d nginx

	docker exec -it container_name bash

	cd /etc/nginx/conf.d/default.conf

	apt-get update

	apt-get install nano

	nano /etc/nginx/nginx.conf

		include /etc/nginx/sites-enabled/*.conf;

	nano /etc/nginx/sites-enabled/kaduk.conf

		server {
			listen 80;
    		server_name kaduk;

		    location / {
		        root   /usr/share/nginx/html;
		        index  index.html index.htm;
		    }
		}


	nano /etc/nginx/conf.d/default.conf	

	http://localhost:8080

Нюансы

	Если создаю nginx в docker, то обязательно нужно пробросить порт.

Команды

	nginx -s reload - перезагрузка конфигурации

	service nginx status

	nginx -t -c path_to_nginx.conf - проверяет правильность конфигурационного файла